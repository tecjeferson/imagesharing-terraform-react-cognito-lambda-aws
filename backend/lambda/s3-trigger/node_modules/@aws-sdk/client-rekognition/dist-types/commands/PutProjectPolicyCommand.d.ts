import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { PutProjectPolicyRequest, PutProjectPolicyResponse } from "../models/models_0";
import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../RekognitionClient";
export interface PutProjectPolicyCommandInput extends PutProjectPolicyRequest {
}
export interface PutProjectPolicyCommandOutput extends PutProjectPolicyResponse, __MetadataBearer {
}
/**
 * <p>Attaches a project policy to a Amazon Rekognition Custom Labels project in a trusting AWS account. A
 *          project policy specifies that a trusted AWS account can copy a model version from a
 *          trusting AWS account to a project in the trusted AWS account. To copy a model version you use
 *        the <a>CopyProjectVersion</a> operation.</p>
 *
 *
 *          <p>For more information about the format of a project policy document, see Attaching a project policy (SDK)
 *          in the <i>Amazon Rekognition Custom Labels Developer Guide</i>.
 *       </p>
 *
 *          <p>The response from <code>PutProjectPolicy</code> is a revision ID for the project policy.
 *          You can attach multiple project policies to a project. You can also update an existing
 *          project policy by specifying the policy revision ID of the existing policy.</p>
 *          <p>To remove a project policy from a project, call <a>DeleteProjectPolicy</a>.
 *          To get a list of project policies attached to a project, call <a>ListProjectPolicies</a>. </p>
 *
 *          <p>You copy a model version by calling <a>CopyProjectVersion</a>.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { RekognitionClient, PutProjectPolicyCommand } from "@aws-sdk/client-rekognition"; // ES Modules import
 * // const { RekognitionClient, PutProjectPolicyCommand } = require("@aws-sdk/client-rekognition"); // CommonJS import
 * const client = new RekognitionClient(config);
 * const command = new PutProjectPolicyCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link PutProjectPolicyCommandInput} for command's `input` shape.
 * @see {@link PutProjectPolicyCommandOutput} for command's `response` shape.
 * @see {@link RekognitionClientResolvedConfig | config} for RekognitionClient's `config` shape.
 *
 */
export declare class PutProjectPolicyCommand extends $Command<PutProjectPolicyCommandInput, PutProjectPolicyCommandOutput, RekognitionClientResolvedConfig> {
    readonly input: PutProjectPolicyCommandInput;
    constructor(input: PutProjectPolicyCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RekognitionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutProjectPolicyCommandInput, PutProjectPolicyCommandOutput>;
    private serialize;
    private deserialize;
}
