import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, LazyJsonString as __LazyJsonString, limitedParseFloat32 as __limitedParseFloat32, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, throwDefaultError, } from "@aws-sdk/smithy-client";
import { AccessDeniedException, HumanLoopQuotaExceededException, IdempotentParameterMismatchException, ImageTooLargeException, InternalServerError, InvalidImageFormatException, InvalidPaginationTokenException, InvalidParameterException, InvalidPolicyRevisionIdException, InvalidS3ObjectException, LimitExceededException, MalformedPolicyDocumentException, ProvisionedThroughputExceededException, ResourceAlreadyExistsException, ResourceInUseException, ResourceNotFoundException, ResourceNotReadyException, ServiceQuotaExceededException, ThrottlingException, VideoTooLargeException, } from "../models/models_0";
import { RekognitionServiceException as __BaseException } from "../models/RekognitionServiceException";
export const serializeAws_json1_1CompareFacesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.CompareFaces",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CompareFacesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CopyProjectVersionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.CopyProjectVersion",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CopyProjectVersionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateCollectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.CreateCollection",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateCollectionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateDatasetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.CreateDataset",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateDatasetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateProjectCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.CreateProject",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateProjectRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateProjectVersionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.CreateProjectVersion",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateProjectVersionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateStreamProcessorCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.CreateStreamProcessor",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateStreamProcessorRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteCollectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.DeleteCollection",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteCollectionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteDatasetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.DeleteDataset",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteDatasetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteFacesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.DeleteFaces",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteFacesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteProjectCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.DeleteProject",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteProjectRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteProjectPolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.DeleteProjectPolicy",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteProjectPolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteProjectVersionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.DeleteProjectVersion",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteProjectVersionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteStreamProcessorCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.DeleteStreamProcessor",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteStreamProcessorRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeCollectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.DescribeCollection",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeCollectionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeDatasetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.DescribeDataset",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeDatasetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeProjectsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.DescribeProjects",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeProjectsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeProjectVersionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.DescribeProjectVersions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeProjectVersionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeStreamProcessorCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.DescribeStreamProcessor",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeStreamProcessorRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DetectCustomLabelsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.DetectCustomLabels",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DetectCustomLabelsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DetectFacesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.DetectFaces",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DetectFacesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DetectLabelsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.DetectLabels",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DetectLabelsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DetectModerationLabelsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.DetectModerationLabels",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DetectModerationLabelsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DetectProtectiveEquipmentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.DetectProtectiveEquipment",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DetectProtectiveEquipmentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DetectTextCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.DetectText",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DetectTextRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DistributeDatasetEntriesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.DistributeDatasetEntries",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DistributeDatasetEntriesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetCelebrityInfoCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.GetCelebrityInfo",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetCelebrityInfoRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetCelebrityRecognitionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.GetCelebrityRecognition",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetCelebrityRecognitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetContentModerationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.GetContentModeration",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetContentModerationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetFaceDetectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.GetFaceDetection",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetFaceDetectionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetFaceSearchCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.GetFaceSearch",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetFaceSearchRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetLabelDetectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.GetLabelDetection",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetLabelDetectionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetPersonTrackingCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.GetPersonTracking",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetPersonTrackingRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetSegmentDetectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.GetSegmentDetection",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetSegmentDetectionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetTextDetectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.GetTextDetection",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetTextDetectionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1IndexFacesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.IndexFaces",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1IndexFacesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListCollectionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.ListCollections",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListCollectionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListDatasetEntriesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.ListDatasetEntries",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListDatasetEntriesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListDatasetLabelsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.ListDatasetLabels",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListDatasetLabelsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListFacesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.ListFaces",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListFacesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListProjectPoliciesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.ListProjectPolicies",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListProjectPoliciesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListStreamProcessorsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.ListStreamProcessors",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListStreamProcessorsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListTagsForResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.ListTagsForResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTagsForResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1PutProjectPolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.PutProjectPolicy",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutProjectPolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1RecognizeCelebritiesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.RecognizeCelebrities",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1RecognizeCelebritiesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1SearchFacesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.SearchFaces",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1SearchFacesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1SearchFacesByImageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.SearchFacesByImage",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1SearchFacesByImageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StartCelebrityRecognitionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.StartCelebrityRecognition",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartCelebrityRecognitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StartContentModerationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.StartContentModeration",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartContentModerationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StartFaceDetectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.StartFaceDetection",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartFaceDetectionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StartFaceSearchCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.StartFaceSearch",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartFaceSearchRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StartLabelDetectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.StartLabelDetection",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartLabelDetectionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StartPersonTrackingCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.StartPersonTracking",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartPersonTrackingRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StartProjectVersionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.StartProjectVersion",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartProjectVersionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StartSegmentDetectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.StartSegmentDetection",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartSegmentDetectionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StartStreamProcessorCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.StartStreamProcessor",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartStreamProcessorRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StartTextDetectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.StartTextDetection",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartTextDetectionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StopProjectVersionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.StopProjectVersion",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopProjectVersionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StopStreamProcessorCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.StopStreamProcessor",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopStreamProcessorRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1TagResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.TagResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1TagResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UntagResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.UntagResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UntagResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UpdateDatasetEntriesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.UpdateDatasetEntries",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateDatasetEntriesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UpdateStreamProcessorCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RekognitionService.UpdateStreamProcessor",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateStreamProcessorRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const deserializeAws_json1_1CompareFacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CompareFacesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CompareFacesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CompareFacesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ImageTooLargeException":
        case "com.amazonaws.rekognition#ImageTooLargeException":
            throw await deserializeAws_json1_1ImageTooLargeExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidImageFormatException":
        case "com.amazonaws.rekognition#InvalidImageFormatException":
            throw await deserializeAws_json1_1InvalidImageFormatExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidS3ObjectException":
        case "com.amazonaws.rekognition#InvalidS3ObjectException":
            throw await deserializeAws_json1_1InvalidS3ObjectExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CopyProjectVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CopyProjectVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CopyProjectVersionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CopyProjectVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.rekognition#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.rekognition#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.rekognition#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateCollectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateCollectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateCollectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateCollectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.rekognition#ResourceAlreadyExistsException":
            throw await deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.rekognition#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateDatasetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateDatasetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateDatasetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateDatasetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidS3ObjectException":
        case "com.amazonaws.rekognition#InvalidS3ObjectException":
            throw await deserializeAws_json1_1InvalidS3ObjectExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.rekognition#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.rekognition#ResourceAlreadyExistsException":
            throw await deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateProjectResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.rekognition#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.rekognition#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateProjectVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateProjectVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateProjectVersionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateProjectVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.rekognition#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.rekognition#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.rekognition#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateStreamProcessorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateStreamProcessorCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateStreamProcessorResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateStreamProcessorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.rekognition#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.rekognition#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.rekognition#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteCollectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteCollectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteCollectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteCollectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteDatasetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteDatasetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteDatasetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteDatasetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.rekognition#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.rekognition#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteFacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteFacesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteFacesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteFacesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteProjectResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.rekognition#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteProjectPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteProjectPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteProjectPolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteProjectPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidPolicyRevisionIdException":
        case "com.amazonaws.rekognition#InvalidPolicyRevisionIdException":
            throw await deserializeAws_json1_1InvalidPolicyRevisionIdExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteProjectVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteProjectVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteProjectVersionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteProjectVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.rekognition#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteStreamProcessorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteStreamProcessorCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteStreamProcessorResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteStreamProcessorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.rekognition#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeCollectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeCollectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeCollectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeCollectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeDatasetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeDatasetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeDatasetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeDatasetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeProjectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeProjectsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeProjectsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeProjectsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidPaginationTokenException":
        case "com.amazonaws.rekognition#InvalidPaginationTokenException":
            throw await deserializeAws_json1_1InvalidPaginationTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeProjectVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeProjectVersionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeProjectVersionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeProjectVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidPaginationTokenException":
        case "com.amazonaws.rekognition#InvalidPaginationTokenException":
            throw await deserializeAws_json1_1InvalidPaginationTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeStreamProcessorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeStreamProcessorCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeStreamProcessorResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeStreamProcessorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DetectCustomLabelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DetectCustomLabelsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DetectCustomLabelsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DetectCustomLabelsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ImageTooLargeException":
        case "com.amazonaws.rekognition#ImageTooLargeException":
            throw await deserializeAws_json1_1ImageTooLargeExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidImageFormatException":
        case "com.amazonaws.rekognition#InvalidImageFormatException":
            throw await deserializeAws_json1_1InvalidImageFormatExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidS3ObjectException":
        case "com.amazonaws.rekognition#InvalidS3ObjectException":
            throw await deserializeAws_json1_1InvalidS3ObjectExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.rekognition#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ResourceNotReadyException":
        case "com.amazonaws.rekognition#ResourceNotReadyException":
            throw await deserializeAws_json1_1ResourceNotReadyExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DetectFacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DetectFacesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DetectFacesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DetectFacesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ImageTooLargeException":
        case "com.amazonaws.rekognition#ImageTooLargeException":
            throw await deserializeAws_json1_1ImageTooLargeExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidImageFormatException":
        case "com.amazonaws.rekognition#InvalidImageFormatException":
            throw await deserializeAws_json1_1InvalidImageFormatExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidS3ObjectException":
        case "com.amazonaws.rekognition#InvalidS3ObjectException":
            throw await deserializeAws_json1_1InvalidS3ObjectExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DetectLabelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DetectLabelsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DetectLabelsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DetectLabelsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ImageTooLargeException":
        case "com.amazonaws.rekognition#ImageTooLargeException":
            throw await deserializeAws_json1_1ImageTooLargeExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidImageFormatException":
        case "com.amazonaws.rekognition#InvalidImageFormatException":
            throw await deserializeAws_json1_1InvalidImageFormatExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidS3ObjectException":
        case "com.amazonaws.rekognition#InvalidS3ObjectException":
            throw await deserializeAws_json1_1InvalidS3ObjectExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DetectModerationLabelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DetectModerationLabelsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DetectModerationLabelsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DetectModerationLabelsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "HumanLoopQuotaExceededException":
        case "com.amazonaws.rekognition#HumanLoopQuotaExceededException":
            throw await deserializeAws_json1_1HumanLoopQuotaExceededExceptionResponse(parsedOutput, context);
        case "ImageTooLargeException":
        case "com.amazonaws.rekognition#ImageTooLargeException":
            throw await deserializeAws_json1_1ImageTooLargeExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidImageFormatException":
        case "com.amazonaws.rekognition#InvalidImageFormatException":
            throw await deserializeAws_json1_1InvalidImageFormatExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidS3ObjectException":
        case "com.amazonaws.rekognition#InvalidS3ObjectException":
            throw await deserializeAws_json1_1InvalidS3ObjectExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DetectProtectiveEquipmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DetectProtectiveEquipmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DetectProtectiveEquipmentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DetectProtectiveEquipmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ImageTooLargeException":
        case "com.amazonaws.rekognition#ImageTooLargeException":
            throw await deserializeAws_json1_1ImageTooLargeExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidImageFormatException":
        case "com.amazonaws.rekognition#InvalidImageFormatException":
            throw await deserializeAws_json1_1InvalidImageFormatExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidS3ObjectException":
        case "com.amazonaws.rekognition#InvalidS3ObjectException":
            throw await deserializeAws_json1_1InvalidS3ObjectExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DetectTextCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DetectTextCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DetectTextResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DetectTextCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ImageTooLargeException":
        case "com.amazonaws.rekognition#ImageTooLargeException":
            throw await deserializeAws_json1_1ImageTooLargeExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidImageFormatException":
        case "com.amazonaws.rekognition#InvalidImageFormatException":
            throw await deserializeAws_json1_1InvalidImageFormatExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidS3ObjectException":
        case "com.amazonaws.rekognition#InvalidS3ObjectException":
            throw await deserializeAws_json1_1InvalidS3ObjectExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DistributeDatasetEntriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DistributeDatasetEntriesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DistributeDatasetEntriesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DistributeDatasetEntriesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ResourceNotReadyException":
        case "com.amazonaws.rekognition#ResourceNotReadyException":
            throw await deserializeAws_json1_1ResourceNotReadyExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetCelebrityInfoCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetCelebrityInfoCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetCelebrityInfoResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetCelebrityInfoCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetCelebrityRecognitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetCelebrityRecognitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetCelebrityRecognitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetCelebrityRecognitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidPaginationTokenException":
        case "com.amazonaws.rekognition#InvalidPaginationTokenException":
            throw await deserializeAws_json1_1InvalidPaginationTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetContentModerationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetContentModerationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetContentModerationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetContentModerationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidPaginationTokenException":
        case "com.amazonaws.rekognition#InvalidPaginationTokenException":
            throw await deserializeAws_json1_1InvalidPaginationTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetFaceDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetFaceDetectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetFaceDetectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetFaceDetectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidPaginationTokenException":
        case "com.amazonaws.rekognition#InvalidPaginationTokenException":
            throw await deserializeAws_json1_1InvalidPaginationTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetFaceSearchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetFaceSearchCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetFaceSearchResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetFaceSearchCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidPaginationTokenException":
        case "com.amazonaws.rekognition#InvalidPaginationTokenException":
            throw await deserializeAws_json1_1InvalidPaginationTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetLabelDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetLabelDetectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetLabelDetectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetLabelDetectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidPaginationTokenException":
        case "com.amazonaws.rekognition#InvalidPaginationTokenException":
            throw await deserializeAws_json1_1InvalidPaginationTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetPersonTrackingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetPersonTrackingCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetPersonTrackingResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetPersonTrackingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidPaginationTokenException":
        case "com.amazonaws.rekognition#InvalidPaginationTokenException":
            throw await deserializeAws_json1_1InvalidPaginationTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetSegmentDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetSegmentDetectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetSegmentDetectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetSegmentDetectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidPaginationTokenException":
        case "com.amazonaws.rekognition#InvalidPaginationTokenException":
            throw await deserializeAws_json1_1InvalidPaginationTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetTextDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetTextDetectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetTextDetectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetTextDetectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidPaginationTokenException":
        case "com.amazonaws.rekognition#InvalidPaginationTokenException":
            throw await deserializeAws_json1_1InvalidPaginationTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1IndexFacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1IndexFacesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1IndexFacesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1IndexFacesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ImageTooLargeException":
        case "com.amazonaws.rekognition#ImageTooLargeException":
            throw await deserializeAws_json1_1ImageTooLargeExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidImageFormatException":
        case "com.amazonaws.rekognition#InvalidImageFormatException":
            throw await deserializeAws_json1_1InvalidImageFormatExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidS3ObjectException":
        case "com.amazonaws.rekognition#InvalidS3ObjectException":
            throw await deserializeAws_json1_1InvalidS3ObjectExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.rekognition#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListCollectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListCollectionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListCollectionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListCollectionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidPaginationTokenException":
        case "com.amazonaws.rekognition#InvalidPaginationTokenException":
            throw await deserializeAws_json1_1InvalidPaginationTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListDatasetEntriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDatasetEntriesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListDatasetEntriesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListDatasetEntriesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidPaginationTokenException":
        case "com.amazonaws.rekognition#InvalidPaginationTokenException":
            throw await deserializeAws_json1_1InvalidPaginationTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.rekognition#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ResourceNotReadyException":
        case "com.amazonaws.rekognition#ResourceNotReadyException":
            throw await deserializeAws_json1_1ResourceNotReadyExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListDatasetLabelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDatasetLabelsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListDatasetLabelsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListDatasetLabelsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidPaginationTokenException":
        case "com.amazonaws.rekognition#InvalidPaginationTokenException":
            throw await deserializeAws_json1_1InvalidPaginationTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.rekognition#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ResourceNotReadyException":
        case "com.amazonaws.rekognition#ResourceNotReadyException":
            throw await deserializeAws_json1_1ResourceNotReadyExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListFacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListFacesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListFacesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListFacesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidPaginationTokenException":
        case "com.amazonaws.rekognition#InvalidPaginationTokenException":
            throw await deserializeAws_json1_1InvalidPaginationTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListProjectPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListProjectPoliciesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListProjectPoliciesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListProjectPoliciesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidPaginationTokenException":
        case "com.amazonaws.rekognition#InvalidPaginationTokenException":
            throw await deserializeAws_json1_1InvalidPaginationTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListStreamProcessorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListStreamProcessorsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListStreamProcessorsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListStreamProcessorsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidPaginationTokenException":
        case "com.amazonaws.rekognition#InvalidPaginationTokenException":
            throw await deserializeAws_json1_1InvalidPaginationTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTagsForResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1PutProjectPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutProjectPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutProjectPolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1PutProjectPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidPolicyRevisionIdException":
        case "com.amazonaws.rekognition#InvalidPolicyRevisionIdException":
            throw await deserializeAws_json1_1InvalidPolicyRevisionIdExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.rekognition#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.rekognition#MalformedPolicyDocumentException":
            throw await deserializeAws_json1_1MalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.rekognition#ResourceAlreadyExistsException":
            throw await deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.rekognition#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1RecognizeCelebritiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1RecognizeCelebritiesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1RecognizeCelebritiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1RecognizeCelebritiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ImageTooLargeException":
        case "com.amazonaws.rekognition#ImageTooLargeException":
            throw await deserializeAws_json1_1ImageTooLargeExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidImageFormatException":
        case "com.amazonaws.rekognition#InvalidImageFormatException":
            throw await deserializeAws_json1_1InvalidImageFormatExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidS3ObjectException":
        case "com.amazonaws.rekognition#InvalidS3ObjectException":
            throw await deserializeAws_json1_1InvalidS3ObjectExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1SearchFacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1SearchFacesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1SearchFacesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1SearchFacesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1SearchFacesByImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1SearchFacesByImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1SearchFacesByImageResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1SearchFacesByImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ImageTooLargeException":
        case "com.amazonaws.rekognition#ImageTooLargeException":
            throw await deserializeAws_json1_1ImageTooLargeExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidImageFormatException":
        case "com.amazonaws.rekognition#InvalidImageFormatException":
            throw await deserializeAws_json1_1InvalidImageFormatExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidS3ObjectException":
        case "com.amazonaws.rekognition#InvalidS3ObjectException":
            throw await deserializeAws_json1_1InvalidS3ObjectExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StartCelebrityRecognitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartCelebrityRecognitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartCelebrityRecognitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StartCelebrityRecognitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.rekognition#IdempotentParameterMismatchException":
            throw await deserializeAws_json1_1IdempotentParameterMismatchExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidS3ObjectException":
        case "com.amazonaws.rekognition#InvalidS3ObjectException":
            throw await deserializeAws_json1_1InvalidS3ObjectExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.rekognition#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "VideoTooLargeException":
        case "com.amazonaws.rekognition#VideoTooLargeException":
            throw await deserializeAws_json1_1VideoTooLargeExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StartContentModerationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartContentModerationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartContentModerationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StartContentModerationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.rekognition#IdempotentParameterMismatchException":
            throw await deserializeAws_json1_1IdempotentParameterMismatchExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidS3ObjectException":
        case "com.amazonaws.rekognition#InvalidS3ObjectException":
            throw await deserializeAws_json1_1InvalidS3ObjectExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.rekognition#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "VideoTooLargeException":
        case "com.amazonaws.rekognition#VideoTooLargeException":
            throw await deserializeAws_json1_1VideoTooLargeExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StartFaceDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartFaceDetectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartFaceDetectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StartFaceDetectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.rekognition#IdempotentParameterMismatchException":
            throw await deserializeAws_json1_1IdempotentParameterMismatchExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidS3ObjectException":
        case "com.amazonaws.rekognition#InvalidS3ObjectException":
            throw await deserializeAws_json1_1InvalidS3ObjectExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.rekognition#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "VideoTooLargeException":
        case "com.amazonaws.rekognition#VideoTooLargeException":
            throw await deserializeAws_json1_1VideoTooLargeExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StartFaceSearchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartFaceSearchCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartFaceSearchResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StartFaceSearchCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.rekognition#IdempotentParameterMismatchException":
            throw await deserializeAws_json1_1IdempotentParameterMismatchExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidS3ObjectException":
        case "com.amazonaws.rekognition#InvalidS3ObjectException":
            throw await deserializeAws_json1_1InvalidS3ObjectExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.rekognition#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "VideoTooLargeException":
        case "com.amazonaws.rekognition#VideoTooLargeException":
            throw await deserializeAws_json1_1VideoTooLargeExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StartLabelDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartLabelDetectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartLabelDetectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StartLabelDetectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.rekognition#IdempotentParameterMismatchException":
            throw await deserializeAws_json1_1IdempotentParameterMismatchExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidS3ObjectException":
        case "com.amazonaws.rekognition#InvalidS3ObjectException":
            throw await deserializeAws_json1_1InvalidS3ObjectExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.rekognition#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "VideoTooLargeException":
        case "com.amazonaws.rekognition#VideoTooLargeException":
            throw await deserializeAws_json1_1VideoTooLargeExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StartPersonTrackingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartPersonTrackingCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartPersonTrackingResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StartPersonTrackingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.rekognition#IdempotentParameterMismatchException":
            throw await deserializeAws_json1_1IdempotentParameterMismatchExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidS3ObjectException":
        case "com.amazonaws.rekognition#InvalidS3ObjectException":
            throw await deserializeAws_json1_1InvalidS3ObjectExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.rekognition#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "VideoTooLargeException":
        case "com.amazonaws.rekognition#VideoTooLargeException":
            throw await deserializeAws_json1_1VideoTooLargeExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StartProjectVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartProjectVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartProjectVersionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StartProjectVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.rekognition#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.rekognition#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StartSegmentDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartSegmentDetectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartSegmentDetectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StartSegmentDetectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.rekognition#IdempotentParameterMismatchException":
            throw await deserializeAws_json1_1IdempotentParameterMismatchExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidS3ObjectException":
        case "com.amazonaws.rekognition#InvalidS3ObjectException":
            throw await deserializeAws_json1_1InvalidS3ObjectExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.rekognition#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "VideoTooLargeException":
        case "com.amazonaws.rekognition#VideoTooLargeException":
            throw await deserializeAws_json1_1VideoTooLargeExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StartStreamProcessorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartStreamProcessorCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartStreamProcessorResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StartStreamProcessorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.rekognition#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StartTextDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartTextDetectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartTextDetectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StartTextDetectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.rekognition#IdempotentParameterMismatchException":
            throw await deserializeAws_json1_1IdempotentParameterMismatchExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidS3ObjectException":
        case "com.amazonaws.rekognition#InvalidS3ObjectException":
            throw await deserializeAws_json1_1InvalidS3ObjectExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.rekognition#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "VideoTooLargeException":
        case "com.amazonaws.rekognition#VideoTooLargeException":
            throw await deserializeAws_json1_1VideoTooLargeExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StopProjectVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopProjectVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StopProjectVersionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StopProjectVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.rekognition#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StopStreamProcessorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopStreamProcessorCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StopStreamProcessorResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StopStreamProcessorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.rekognition#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1TagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1TagResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.rekognition#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UntagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UntagResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UpdateDatasetEntriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateDatasetEntriesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateDatasetEntriesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateDatasetEntriesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.rekognition#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.rekognition#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UpdateStreamProcessorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateStreamProcessorCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateStreamProcessorResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateStreamProcessorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1AccessDeniedExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1AccessDeniedException(body, context);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1HumanLoopQuotaExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1HumanLoopQuotaExceededException(body, context);
    const exception = new HumanLoopQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1IdempotentParameterMismatchExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1IdempotentParameterMismatchException(body, context);
    const exception = new IdempotentParameterMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ImageTooLargeExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ImageTooLargeException(body, context);
    const exception = new ImageTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InternalServerErrorResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InternalServerError(body, context);
    const exception = new InternalServerError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InvalidImageFormatExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidImageFormatException(body, context);
    const exception = new InvalidImageFormatException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InvalidPaginationTokenExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidPaginationTokenException(body, context);
    const exception = new InvalidPaginationTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InvalidParameterExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidParameterException(body, context);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InvalidPolicyRevisionIdExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidPolicyRevisionIdException(body, context);
    const exception = new InvalidPolicyRevisionIdException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InvalidS3ObjectExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidS3ObjectException(body, context);
    const exception = new InvalidS3ObjectException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1LimitExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1LimitExceededException(body, context);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1MalformedPolicyDocumentExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1MalformedPolicyDocumentException(body, context);
    const exception = new MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ProvisionedThroughputExceededException(body, context);
    const exception = new ProvisionedThroughputExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceAlreadyExistsException(body, context);
    const exception = new ResourceAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ResourceInUseExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceInUseException(body, context);
    const exception = new ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ResourceNotReadyExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceNotReadyException(body, context);
    const exception = new ResourceNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ServiceQuotaExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ServiceQuotaExceededException(body, context);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ThrottlingExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ThrottlingException(body, context);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1VideoTooLargeExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1VideoTooLargeException(body, context);
    const exception = new VideoTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const serializeAws_json1_1Asset = (input, context) => {
    return {
        ...(input.GroundTruthManifest != null && {
            GroundTruthManifest: serializeAws_json1_1GroundTruthManifest(input.GroundTruthManifest, context),
        }),
    };
};
const serializeAws_json1_1Assets = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1Asset(entry, context);
    });
};
const serializeAws_json1_1Attributes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1BlackFrame = (input, context) => {
    return {
        ...(input.MaxPixelThreshold != null && { MaxPixelThreshold: __serializeFloat(input.MaxPixelThreshold) }),
        ...(input.MinCoveragePercentage != null && {
            MinCoveragePercentage: __serializeFloat(input.MinCoveragePercentage),
        }),
    };
};
const serializeAws_json1_1BoundingBox = (input, context) => {
    return {
        ...(input.Height != null && { Height: __serializeFloat(input.Height) }),
        ...(input.Left != null && { Left: __serializeFloat(input.Left) }),
        ...(input.Top != null && { Top: __serializeFloat(input.Top) }),
        ...(input.Width != null && { Width: __serializeFloat(input.Width) }),
    };
};
const serializeAws_json1_1CompareFacesRequest = (input, context) => {
    return {
        ...(input.QualityFilter != null && { QualityFilter: input.QualityFilter }),
        ...(input.SimilarityThreshold != null && { SimilarityThreshold: __serializeFloat(input.SimilarityThreshold) }),
        ...(input.SourceImage != null && { SourceImage: serializeAws_json1_1Image(input.SourceImage, context) }),
        ...(input.TargetImage != null && { TargetImage: serializeAws_json1_1Image(input.TargetImage, context) }),
    };
};
const serializeAws_json1_1ConnectedHomeLabels = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ConnectedHomeSettings = (input, context) => {
    return {
        ...(input.Labels != null && { Labels: serializeAws_json1_1ConnectedHomeLabels(input.Labels, context) }),
        ...(input.MinConfidence != null && { MinConfidence: __serializeFloat(input.MinConfidence) }),
    };
};
const serializeAws_json1_1ConnectedHomeSettingsForUpdate = (input, context) => {
    return {
        ...(input.Labels != null && { Labels: serializeAws_json1_1ConnectedHomeLabels(input.Labels, context) }),
        ...(input.MinConfidence != null && { MinConfidence: __serializeFloat(input.MinConfidence) }),
    };
};
const serializeAws_json1_1ContentClassifiers = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1CopyProjectVersionRequest = (input, context) => {
    return {
        ...(input.DestinationProjectArn != null && { DestinationProjectArn: input.DestinationProjectArn }),
        ...(input.KmsKeyId != null && { KmsKeyId: input.KmsKeyId }),
        ...(input.OutputConfig != null && { OutputConfig: serializeAws_json1_1OutputConfig(input.OutputConfig, context) }),
        ...(input.SourceProjectArn != null && { SourceProjectArn: input.SourceProjectArn }),
        ...(input.SourceProjectVersionArn != null && { SourceProjectVersionArn: input.SourceProjectVersionArn }),
        ...(input.Tags != null && { Tags: serializeAws_json1_1TagMap(input.Tags, context) }),
        ...(input.VersionName != null && { VersionName: input.VersionName }),
    };
};
const serializeAws_json1_1CreateCollectionRequest = (input, context) => {
    return {
        ...(input.CollectionId != null && { CollectionId: input.CollectionId }),
        ...(input.Tags != null && { Tags: serializeAws_json1_1TagMap(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateDatasetRequest = (input, context) => {
    return {
        ...(input.DatasetSource != null && {
            DatasetSource: serializeAws_json1_1DatasetSource(input.DatasetSource, context),
        }),
        ...(input.DatasetType != null && { DatasetType: input.DatasetType }),
        ...(input.ProjectArn != null && { ProjectArn: input.ProjectArn }),
    };
};
const serializeAws_json1_1CreateProjectRequest = (input, context) => {
    return {
        ...(input.ProjectName != null && { ProjectName: input.ProjectName }),
    };
};
const serializeAws_json1_1CreateProjectVersionRequest = (input, context) => {
    return {
        ...(input.KmsKeyId != null && { KmsKeyId: input.KmsKeyId }),
        ...(input.OutputConfig != null && { OutputConfig: serializeAws_json1_1OutputConfig(input.OutputConfig, context) }),
        ...(input.ProjectArn != null && { ProjectArn: input.ProjectArn }),
        ...(input.Tags != null && { Tags: serializeAws_json1_1TagMap(input.Tags, context) }),
        ...(input.TestingData != null && { TestingData: serializeAws_json1_1TestingData(input.TestingData, context) }),
        ...(input.TrainingData != null && { TrainingData: serializeAws_json1_1TrainingData(input.TrainingData, context) }),
        ...(input.VersionName != null && { VersionName: input.VersionName }),
    };
};
const serializeAws_json1_1CreateStreamProcessorRequest = (input, context) => {
    return {
        ...(input.DataSharingPreference != null && {
            DataSharingPreference: serializeAws_json1_1StreamProcessorDataSharingPreference(input.DataSharingPreference, context),
        }),
        ...(input.Input != null && { Input: serializeAws_json1_1StreamProcessorInput(input.Input, context) }),
        ...(input.KmsKeyId != null && { KmsKeyId: input.KmsKeyId }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.NotificationChannel != null && {
            NotificationChannel: serializeAws_json1_1StreamProcessorNotificationChannel(input.NotificationChannel, context),
        }),
        ...(input.Output != null && { Output: serializeAws_json1_1StreamProcessorOutput(input.Output, context) }),
        ...(input.RegionsOfInterest != null && {
            RegionsOfInterest: serializeAws_json1_1RegionsOfInterest(input.RegionsOfInterest, context),
        }),
        ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
        ...(input.Settings != null && { Settings: serializeAws_json1_1StreamProcessorSettings(input.Settings, context) }),
        ...(input.Tags != null && { Tags: serializeAws_json1_1TagMap(input.Tags, context) }),
    };
};
const serializeAws_json1_1DatasetChanges = (input, context) => {
    return {
        ...(input.GroundTruth != null && { GroundTruth: context.base64Encoder(input.GroundTruth) }),
    };
};
const serializeAws_json1_1DatasetLabels = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1DatasetSource = (input, context) => {
    return {
        ...(input.DatasetArn != null && { DatasetArn: input.DatasetArn }),
        ...(input.GroundTruthManifest != null && {
            GroundTruthManifest: serializeAws_json1_1GroundTruthManifest(input.GroundTruthManifest, context),
        }),
    };
};
const serializeAws_json1_1DeleteCollectionRequest = (input, context) => {
    return {
        ...(input.CollectionId != null && { CollectionId: input.CollectionId }),
    };
};
const serializeAws_json1_1DeleteDatasetRequest = (input, context) => {
    return {
        ...(input.DatasetArn != null && { DatasetArn: input.DatasetArn }),
    };
};
const serializeAws_json1_1DeleteFacesRequest = (input, context) => {
    return {
        ...(input.CollectionId != null && { CollectionId: input.CollectionId }),
        ...(input.FaceIds != null && { FaceIds: serializeAws_json1_1FaceIdList(input.FaceIds, context) }),
    };
};
const serializeAws_json1_1DeleteProjectPolicyRequest = (input, context) => {
    return {
        ...(input.PolicyName != null && { PolicyName: input.PolicyName }),
        ...(input.PolicyRevisionId != null && { PolicyRevisionId: input.PolicyRevisionId }),
        ...(input.ProjectArn != null && { ProjectArn: input.ProjectArn }),
    };
};
const serializeAws_json1_1DeleteProjectRequest = (input, context) => {
    return {
        ...(input.ProjectArn != null && { ProjectArn: input.ProjectArn }),
    };
};
const serializeAws_json1_1DeleteProjectVersionRequest = (input, context) => {
    return {
        ...(input.ProjectVersionArn != null && { ProjectVersionArn: input.ProjectVersionArn }),
    };
};
const serializeAws_json1_1DeleteStreamProcessorRequest = (input, context) => {
    return {
        ...(input.Name != null && { Name: input.Name }),
    };
};
const serializeAws_json1_1DescribeCollectionRequest = (input, context) => {
    return {
        ...(input.CollectionId != null && { CollectionId: input.CollectionId }),
    };
};
const serializeAws_json1_1DescribeDatasetRequest = (input, context) => {
    return {
        ...(input.DatasetArn != null && { DatasetArn: input.DatasetArn }),
    };
};
const serializeAws_json1_1DescribeProjectsRequest = (input, context) => {
    return {
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.ProjectNames != null && { ProjectNames: serializeAws_json1_1ProjectNames(input.ProjectNames, context) }),
    };
};
const serializeAws_json1_1DescribeProjectVersionsRequest = (input, context) => {
    return {
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.ProjectArn != null && { ProjectArn: input.ProjectArn }),
        ...(input.VersionNames != null && { VersionNames: serializeAws_json1_1VersionNames(input.VersionNames, context) }),
    };
};
const serializeAws_json1_1DescribeStreamProcessorRequest = (input, context) => {
    return {
        ...(input.Name != null && { Name: input.Name }),
    };
};
const serializeAws_json1_1DetectCustomLabelsRequest = (input, context) => {
    return {
        ...(input.Image != null && { Image: serializeAws_json1_1Image(input.Image, context) }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.MinConfidence != null && { MinConfidence: __serializeFloat(input.MinConfidence) }),
        ...(input.ProjectVersionArn != null && { ProjectVersionArn: input.ProjectVersionArn }),
    };
};
const serializeAws_json1_1DetectFacesRequest = (input, context) => {
    return {
        ...(input.Attributes != null && { Attributes: serializeAws_json1_1Attributes(input.Attributes, context) }),
        ...(input.Image != null && { Image: serializeAws_json1_1Image(input.Image, context) }),
    };
};
const serializeAws_json1_1DetectionFilter = (input, context) => {
    return {
        ...(input.MinBoundingBoxHeight != null && { MinBoundingBoxHeight: __serializeFloat(input.MinBoundingBoxHeight) }),
        ...(input.MinBoundingBoxWidth != null && { MinBoundingBoxWidth: __serializeFloat(input.MinBoundingBoxWidth) }),
        ...(input.MinConfidence != null && { MinConfidence: __serializeFloat(input.MinConfidence) }),
    };
};
const serializeAws_json1_1DetectLabelsRequest = (input, context) => {
    return {
        ...(input.Image != null && { Image: serializeAws_json1_1Image(input.Image, context) }),
        ...(input.MaxLabels != null && { MaxLabels: input.MaxLabels }),
        ...(input.MinConfidence != null && { MinConfidence: __serializeFloat(input.MinConfidence) }),
    };
};
const serializeAws_json1_1DetectModerationLabelsRequest = (input, context) => {
    return {
        ...(input.HumanLoopConfig != null && {
            HumanLoopConfig: serializeAws_json1_1HumanLoopConfig(input.HumanLoopConfig, context),
        }),
        ...(input.Image != null && { Image: serializeAws_json1_1Image(input.Image, context) }),
        ...(input.MinConfidence != null && { MinConfidence: __serializeFloat(input.MinConfidence) }),
    };
};
const serializeAws_json1_1DetectProtectiveEquipmentRequest = (input, context) => {
    return {
        ...(input.Image != null && { Image: serializeAws_json1_1Image(input.Image, context) }),
        ...(input.SummarizationAttributes != null && {
            SummarizationAttributes: serializeAws_json1_1ProtectiveEquipmentSummarizationAttributes(input.SummarizationAttributes, context),
        }),
    };
};
const serializeAws_json1_1DetectTextFilters = (input, context) => {
    return {
        ...(input.RegionsOfInterest != null && {
            RegionsOfInterest: serializeAws_json1_1RegionsOfInterest(input.RegionsOfInterest, context),
        }),
        ...(input.WordFilter != null && { WordFilter: serializeAws_json1_1DetectionFilter(input.WordFilter, context) }),
    };
};
const serializeAws_json1_1DetectTextRequest = (input, context) => {
    return {
        ...(input.Filters != null && { Filters: serializeAws_json1_1DetectTextFilters(input.Filters, context) }),
        ...(input.Image != null && { Image: serializeAws_json1_1Image(input.Image, context) }),
    };
};
const serializeAws_json1_1DistributeDataset = (input, context) => {
    return {
        ...(input.Arn != null && { Arn: input.Arn }),
    };
};
const serializeAws_json1_1DistributeDatasetEntriesRequest = (input, context) => {
    return {
        ...(input.Datasets != null && {
            Datasets: serializeAws_json1_1DistributeDatasetMetadataList(input.Datasets, context),
        }),
    };
};
const serializeAws_json1_1DistributeDatasetMetadataList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1DistributeDataset(entry, context);
    });
};
const serializeAws_json1_1FaceIdList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1FaceSearchSettings = (input, context) => {
    return {
        ...(input.CollectionId != null && { CollectionId: input.CollectionId }),
        ...(input.FaceMatchThreshold != null && { FaceMatchThreshold: __serializeFloat(input.FaceMatchThreshold) }),
    };
};
const serializeAws_json1_1GetCelebrityInfoRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
    };
};
const serializeAws_json1_1GetCelebrityRecognitionRequest = (input, context) => {
    return {
        ...(input.JobId != null && { JobId: input.JobId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.SortBy != null && { SortBy: input.SortBy }),
    };
};
const serializeAws_json1_1GetContentModerationRequest = (input, context) => {
    return {
        ...(input.JobId != null && { JobId: input.JobId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.SortBy != null && { SortBy: input.SortBy }),
    };
};
const serializeAws_json1_1GetFaceDetectionRequest = (input, context) => {
    return {
        ...(input.JobId != null && { JobId: input.JobId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1GetFaceSearchRequest = (input, context) => {
    return {
        ...(input.JobId != null && { JobId: input.JobId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.SortBy != null && { SortBy: input.SortBy }),
    };
};
const serializeAws_json1_1GetLabelDetectionRequest = (input, context) => {
    return {
        ...(input.JobId != null && { JobId: input.JobId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.SortBy != null && { SortBy: input.SortBy }),
    };
};
const serializeAws_json1_1GetPersonTrackingRequest = (input, context) => {
    return {
        ...(input.JobId != null && { JobId: input.JobId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.SortBy != null && { SortBy: input.SortBy }),
    };
};
const serializeAws_json1_1GetSegmentDetectionRequest = (input, context) => {
    return {
        ...(input.JobId != null && { JobId: input.JobId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1GetTextDetectionRequest = (input, context) => {
    return {
        ...(input.JobId != null && { JobId: input.JobId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1GroundTruthManifest = (input, context) => {
    return {
        ...(input.S3Object != null && { S3Object: serializeAws_json1_1S3Object(input.S3Object, context) }),
    };
};
const serializeAws_json1_1HumanLoopConfig = (input, context) => {
    return {
        ...(input.DataAttributes != null && {
            DataAttributes: serializeAws_json1_1HumanLoopDataAttributes(input.DataAttributes, context),
        }),
        ...(input.FlowDefinitionArn != null && { FlowDefinitionArn: input.FlowDefinitionArn }),
        ...(input.HumanLoopName != null && { HumanLoopName: input.HumanLoopName }),
    };
};
const serializeAws_json1_1HumanLoopDataAttributes = (input, context) => {
    return {
        ...(input.ContentClassifiers != null && {
            ContentClassifiers: serializeAws_json1_1ContentClassifiers(input.ContentClassifiers, context),
        }),
    };
};
const serializeAws_json1_1Image = (input, context) => {
    return {
        ...(input.Bytes != null && { Bytes: context.base64Encoder(input.Bytes) }),
        ...(input.S3Object != null && { S3Object: serializeAws_json1_1S3Object(input.S3Object, context) }),
    };
};
const serializeAws_json1_1IndexFacesRequest = (input, context) => {
    return {
        ...(input.CollectionId != null && { CollectionId: input.CollectionId }),
        ...(input.DetectionAttributes != null && {
            DetectionAttributes: serializeAws_json1_1Attributes(input.DetectionAttributes, context),
        }),
        ...(input.ExternalImageId != null && { ExternalImageId: input.ExternalImageId }),
        ...(input.Image != null && { Image: serializeAws_json1_1Image(input.Image, context) }),
        ...(input.MaxFaces != null && { MaxFaces: input.MaxFaces }),
        ...(input.QualityFilter != null && { QualityFilter: input.QualityFilter }),
    };
};
const serializeAws_json1_1KinesisDataStream = (input, context) => {
    return {
        ...(input.Arn != null && { Arn: input.Arn }),
    };
};
const serializeAws_json1_1KinesisVideoStream = (input, context) => {
    return {
        ...(input.Arn != null && { Arn: input.Arn }),
    };
};
const serializeAws_json1_1KinesisVideoStreamStartSelector = (input, context) => {
    return {
        ...(input.FragmentNumber != null && { FragmentNumber: input.FragmentNumber }),
        ...(input.ProducerTimestamp != null && { ProducerTimestamp: input.ProducerTimestamp }),
    };
};
const serializeAws_json1_1ListCollectionsRequest = (input, context) => {
    return {
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListDatasetEntriesRequest = (input, context) => {
    return {
        ...(input.ContainsLabels != null && {
            ContainsLabels: serializeAws_json1_1DatasetLabels(input.ContainsLabels, context),
        }),
        ...(input.DatasetArn != null && { DatasetArn: input.DatasetArn }),
        ...(input.HasErrors != null && { HasErrors: input.HasErrors }),
        ...(input.Labeled != null && { Labeled: input.Labeled }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.SourceRefContains != null && { SourceRefContains: input.SourceRefContains }),
    };
};
const serializeAws_json1_1ListDatasetLabelsRequest = (input, context) => {
    return {
        ...(input.DatasetArn != null && { DatasetArn: input.DatasetArn }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListFacesRequest = (input, context) => {
    return {
        ...(input.CollectionId != null && { CollectionId: input.CollectionId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListProjectPoliciesRequest = (input, context) => {
    return {
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.ProjectArn != null && { ProjectArn: input.ProjectArn }),
    };
};
const serializeAws_json1_1ListStreamProcessorsRequest = (input, context) => {
    return {
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListTagsForResourceRequest = (input, context) => {
    return {
        ...(input.ResourceArn != null && { ResourceArn: input.ResourceArn }),
    };
};
const serializeAws_json1_1NotificationChannel = (input, context) => {
    return {
        ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
        ...(input.SNSTopicArn != null && { SNSTopicArn: input.SNSTopicArn }),
    };
};
const serializeAws_json1_1OutputConfig = (input, context) => {
    return {
        ...(input.S3Bucket != null && { S3Bucket: input.S3Bucket }),
        ...(input.S3KeyPrefix != null && { S3KeyPrefix: input.S3KeyPrefix }),
    };
};
const serializeAws_json1_1Point = (input, context) => {
    return {
        ...(input.X != null && { X: __serializeFloat(input.X) }),
        ...(input.Y != null && { Y: __serializeFloat(input.Y) }),
    };
};
const serializeAws_json1_1Polygon = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1Point(entry, context);
    });
};
const serializeAws_json1_1ProjectNames = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ProtectiveEquipmentSummarizationAttributes = (input, context) => {
    return {
        ...(input.MinConfidence != null && { MinConfidence: __serializeFloat(input.MinConfidence) }),
        ...(input.RequiredEquipmentTypes != null && {
            RequiredEquipmentTypes: serializeAws_json1_1ProtectiveEquipmentTypes(input.RequiredEquipmentTypes, context),
        }),
    };
};
const serializeAws_json1_1ProtectiveEquipmentTypes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1PutProjectPolicyRequest = (input, context) => {
    return {
        ...(input.PolicyDocument != null && { PolicyDocument: input.PolicyDocument }),
        ...(input.PolicyName != null && { PolicyName: input.PolicyName }),
        ...(input.PolicyRevisionId != null && { PolicyRevisionId: input.PolicyRevisionId }),
        ...(input.ProjectArn != null && { ProjectArn: input.ProjectArn }),
    };
};
const serializeAws_json1_1RecognizeCelebritiesRequest = (input, context) => {
    return {
        ...(input.Image != null && { Image: serializeAws_json1_1Image(input.Image, context) }),
    };
};
const serializeAws_json1_1RegionOfInterest = (input, context) => {
    return {
        ...(input.BoundingBox != null && { BoundingBox: serializeAws_json1_1BoundingBox(input.BoundingBox, context) }),
        ...(input.Polygon != null && { Polygon: serializeAws_json1_1Polygon(input.Polygon, context) }),
    };
};
const serializeAws_json1_1RegionsOfInterest = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1RegionOfInterest(entry, context);
    });
};
const serializeAws_json1_1S3Destination = (input, context) => {
    return {
        ...(input.Bucket != null && { Bucket: input.Bucket }),
        ...(input.KeyPrefix != null && { KeyPrefix: input.KeyPrefix }),
    };
};
const serializeAws_json1_1S3Object = (input, context) => {
    return {
        ...(input.Bucket != null && { Bucket: input.Bucket }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.Version != null && { Version: input.Version }),
    };
};
const serializeAws_json1_1SearchFacesByImageRequest = (input, context) => {
    return {
        ...(input.CollectionId != null && { CollectionId: input.CollectionId }),
        ...(input.FaceMatchThreshold != null && { FaceMatchThreshold: __serializeFloat(input.FaceMatchThreshold) }),
        ...(input.Image != null && { Image: serializeAws_json1_1Image(input.Image, context) }),
        ...(input.MaxFaces != null && { MaxFaces: input.MaxFaces }),
        ...(input.QualityFilter != null && { QualityFilter: input.QualityFilter }),
    };
};
const serializeAws_json1_1SearchFacesRequest = (input, context) => {
    return {
        ...(input.CollectionId != null && { CollectionId: input.CollectionId }),
        ...(input.FaceId != null && { FaceId: input.FaceId }),
        ...(input.FaceMatchThreshold != null && { FaceMatchThreshold: __serializeFloat(input.FaceMatchThreshold) }),
        ...(input.MaxFaces != null && { MaxFaces: input.MaxFaces }),
    };
};
const serializeAws_json1_1SegmentTypes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1StartCelebrityRecognitionRequest = (input, context) => {
    return {
        ...(input.ClientRequestToken != null && { ClientRequestToken: input.ClientRequestToken }),
        ...(input.JobTag != null && { JobTag: input.JobTag }),
        ...(input.NotificationChannel != null && {
            NotificationChannel: serializeAws_json1_1NotificationChannel(input.NotificationChannel, context),
        }),
        ...(input.Video != null && { Video: serializeAws_json1_1Video(input.Video, context) }),
    };
};
const serializeAws_json1_1StartContentModerationRequest = (input, context) => {
    return {
        ...(input.ClientRequestToken != null && { ClientRequestToken: input.ClientRequestToken }),
        ...(input.JobTag != null && { JobTag: input.JobTag }),
        ...(input.MinConfidence != null && { MinConfidence: __serializeFloat(input.MinConfidence) }),
        ...(input.NotificationChannel != null && {
            NotificationChannel: serializeAws_json1_1NotificationChannel(input.NotificationChannel, context),
        }),
        ...(input.Video != null && { Video: serializeAws_json1_1Video(input.Video, context) }),
    };
};
const serializeAws_json1_1StartFaceDetectionRequest = (input, context) => {
    return {
        ...(input.ClientRequestToken != null && { ClientRequestToken: input.ClientRequestToken }),
        ...(input.FaceAttributes != null && { FaceAttributes: input.FaceAttributes }),
        ...(input.JobTag != null && { JobTag: input.JobTag }),
        ...(input.NotificationChannel != null && {
            NotificationChannel: serializeAws_json1_1NotificationChannel(input.NotificationChannel, context),
        }),
        ...(input.Video != null && { Video: serializeAws_json1_1Video(input.Video, context) }),
    };
};
const serializeAws_json1_1StartFaceSearchRequest = (input, context) => {
    return {
        ...(input.ClientRequestToken != null && { ClientRequestToken: input.ClientRequestToken }),
        ...(input.CollectionId != null && { CollectionId: input.CollectionId }),
        ...(input.FaceMatchThreshold != null && { FaceMatchThreshold: __serializeFloat(input.FaceMatchThreshold) }),
        ...(input.JobTag != null && { JobTag: input.JobTag }),
        ...(input.NotificationChannel != null && {
            NotificationChannel: serializeAws_json1_1NotificationChannel(input.NotificationChannel, context),
        }),
        ...(input.Video != null && { Video: serializeAws_json1_1Video(input.Video, context) }),
    };
};
const serializeAws_json1_1StartLabelDetectionRequest = (input, context) => {
    return {
        ...(input.ClientRequestToken != null && { ClientRequestToken: input.ClientRequestToken }),
        ...(input.JobTag != null && { JobTag: input.JobTag }),
        ...(input.MinConfidence != null && { MinConfidence: __serializeFloat(input.MinConfidence) }),
        ...(input.NotificationChannel != null && {
            NotificationChannel: serializeAws_json1_1NotificationChannel(input.NotificationChannel, context),
        }),
        ...(input.Video != null && { Video: serializeAws_json1_1Video(input.Video, context) }),
    };
};
const serializeAws_json1_1StartPersonTrackingRequest = (input, context) => {
    return {
        ...(input.ClientRequestToken != null && { ClientRequestToken: input.ClientRequestToken }),
        ...(input.JobTag != null && { JobTag: input.JobTag }),
        ...(input.NotificationChannel != null && {
            NotificationChannel: serializeAws_json1_1NotificationChannel(input.NotificationChannel, context),
        }),
        ...(input.Video != null && { Video: serializeAws_json1_1Video(input.Video, context) }),
    };
};
const serializeAws_json1_1StartProjectVersionRequest = (input, context) => {
    return {
        ...(input.MaxInferenceUnits != null && { MaxInferenceUnits: input.MaxInferenceUnits }),
        ...(input.MinInferenceUnits != null && { MinInferenceUnits: input.MinInferenceUnits }),
        ...(input.ProjectVersionArn != null && { ProjectVersionArn: input.ProjectVersionArn }),
    };
};
const serializeAws_json1_1StartSegmentDetectionFilters = (input, context) => {
    return {
        ...(input.ShotFilter != null && {
            ShotFilter: serializeAws_json1_1StartShotDetectionFilter(input.ShotFilter, context),
        }),
        ...(input.TechnicalCueFilter != null && {
            TechnicalCueFilter: serializeAws_json1_1StartTechnicalCueDetectionFilter(input.TechnicalCueFilter, context),
        }),
    };
};
const serializeAws_json1_1StartSegmentDetectionRequest = (input, context) => {
    return {
        ...(input.ClientRequestToken != null && { ClientRequestToken: input.ClientRequestToken }),
        ...(input.Filters != null && { Filters: serializeAws_json1_1StartSegmentDetectionFilters(input.Filters, context) }),
        ...(input.JobTag != null && { JobTag: input.JobTag }),
        ...(input.NotificationChannel != null && {
            NotificationChannel: serializeAws_json1_1NotificationChannel(input.NotificationChannel, context),
        }),
        ...(input.SegmentTypes != null && { SegmentTypes: serializeAws_json1_1SegmentTypes(input.SegmentTypes, context) }),
        ...(input.Video != null && { Video: serializeAws_json1_1Video(input.Video, context) }),
    };
};
const serializeAws_json1_1StartShotDetectionFilter = (input, context) => {
    return {
        ...(input.MinSegmentConfidence != null && { MinSegmentConfidence: __serializeFloat(input.MinSegmentConfidence) }),
    };
};
const serializeAws_json1_1StartStreamProcessorRequest = (input, context) => {
    return {
        ...(input.Name != null && { Name: input.Name }),
        ...(input.StartSelector != null && {
            StartSelector: serializeAws_json1_1StreamProcessingStartSelector(input.StartSelector, context),
        }),
        ...(input.StopSelector != null && {
            StopSelector: serializeAws_json1_1StreamProcessingStopSelector(input.StopSelector, context),
        }),
    };
};
const serializeAws_json1_1StartTechnicalCueDetectionFilter = (input, context) => {
    return {
        ...(input.BlackFrame != null && { BlackFrame: serializeAws_json1_1BlackFrame(input.BlackFrame, context) }),
        ...(input.MinSegmentConfidence != null && { MinSegmentConfidence: __serializeFloat(input.MinSegmentConfidence) }),
    };
};
const serializeAws_json1_1StartTextDetectionFilters = (input, context) => {
    return {
        ...(input.RegionsOfInterest != null && {
            RegionsOfInterest: serializeAws_json1_1RegionsOfInterest(input.RegionsOfInterest, context),
        }),
        ...(input.WordFilter != null && { WordFilter: serializeAws_json1_1DetectionFilter(input.WordFilter, context) }),
    };
};
const serializeAws_json1_1StartTextDetectionRequest = (input, context) => {
    return {
        ...(input.ClientRequestToken != null && { ClientRequestToken: input.ClientRequestToken }),
        ...(input.Filters != null && { Filters: serializeAws_json1_1StartTextDetectionFilters(input.Filters, context) }),
        ...(input.JobTag != null && { JobTag: input.JobTag }),
        ...(input.NotificationChannel != null && {
            NotificationChannel: serializeAws_json1_1NotificationChannel(input.NotificationChannel, context),
        }),
        ...(input.Video != null && { Video: serializeAws_json1_1Video(input.Video, context) }),
    };
};
const serializeAws_json1_1StopProjectVersionRequest = (input, context) => {
    return {
        ...(input.ProjectVersionArn != null && { ProjectVersionArn: input.ProjectVersionArn }),
    };
};
const serializeAws_json1_1StopStreamProcessorRequest = (input, context) => {
    return {
        ...(input.Name != null && { Name: input.Name }),
    };
};
const serializeAws_json1_1StreamProcessingStartSelector = (input, context) => {
    return {
        ...(input.KVSStreamStartSelector != null && {
            KVSStreamStartSelector: serializeAws_json1_1KinesisVideoStreamStartSelector(input.KVSStreamStartSelector, context),
        }),
    };
};
const serializeAws_json1_1StreamProcessingStopSelector = (input, context) => {
    return {
        ...(input.MaxDurationInSeconds != null && { MaxDurationInSeconds: input.MaxDurationInSeconds }),
    };
};
const serializeAws_json1_1StreamProcessorDataSharingPreference = (input, context) => {
    return {
        ...(input.OptIn != null && { OptIn: input.OptIn }),
    };
};
const serializeAws_json1_1StreamProcessorInput = (input, context) => {
    return {
        ...(input.KinesisVideoStream != null && {
            KinesisVideoStream: serializeAws_json1_1KinesisVideoStream(input.KinesisVideoStream, context),
        }),
    };
};
const serializeAws_json1_1StreamProcessorNotificationChannel = (input, context) => {
    return {
        ...(input.SNSTopicArn != null && { SNSTopicArn: input.SNSTopicArn }),
    };
};
const serializeAws_json1_1StreamProcessorOutput = (input, context) => {
    return {
        ...(input.KinesisDataStream != null && {
            KinesisDataStream: serializeAws_json1_1KinesisDataStream(input.KinesisDataStream, context),
        }),
        ...(input.S3Destination != null && {
            S3Destination: serializeAws_json1_1S3Destination(input.S3Destination, context),
        }),
    };
};
const serializeAws_json1_1StreamProcessorParametersToDelete = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1StreamProcessorSettings = (input, context) => {
    return {
        ...(input.ConnectedHome != null && {
            ConnectedHome: serializeAws_json1_1ConnectedHomeSettings(input.ConnectedHome, context),
        }),
        ...(input.FaceSearch != null && { FaceSearch: serializeAws_json1_1FaceSearchSettings(input.FaceSearch, context) }),
    };
};
const serializeAws_json1_1StreamProcessorSettingsForUpdate = (input, context) => {
    return {
        ...(input.ConnectedHomeForUpdate != null && {
            ConnectedHomeForUpdate: serializeAws_json1_1ConnectedHomeSettingsForUpdate(input.ConnectedHomeForUpdate, context),
        }),
    };
};
const serializeAws_json1_1TagKeyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1TagMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const serializeAws_json1_1TagResourceRequest = (input, context) => {
    return {
        ...(input.ResourceArn != null && { ResourceArn: input.ResourceArn }),
        ...(input.Tags != null && { Tags: serializeAws_json1_1TagMap(input.Tags, context) }),
    };
};
const serializeAws_json1_1TestingData = (input, context) => {
    return {
        ...(input.Assets != null && { Assets: serializeAws_json1_1Assets(input.Assets, context) }),
        ...(input.AutoCreate != null && { AutoCreate: input.AutoCreate }),
    };
};
const serializeAws_json1_1TrainingData = (input, context) => {
    return {
        ...(input.Assets != null && { Assets: serializeAws_json1_1Assets(input.Assets, context) }),
    };
};
const serializeAws_json1_1UntagResourceRequest = (input, context) => {
    return {
        ...(input.ResourceArn != null && { ResourceArn: input.ResourceArn }),
        ...(input.TagKeys != null && { TagKeys: serializeAws_json1_1TagKeyList(input.TagKeys, context) }),
    };
};
const serializeAws_json1_1UpdateDatasetEntriesRequest = (input, context) => {
    return {
        ...(input.Changes != null && { Changes: serializeAws_json1_1DatasetChanges(input.Changes, context) }),
        ...(input.DatasetArn != null && { DatasetArn: input.DatasetArn }),
    };
};
const serializeAws_json1_1UpdateStreamProcessorRequest = (input, context) => {
    return {
        ...(input.DataSharingPreferenceForUpdate != null && {
            DataSharingPreferenceForUpdate: serializeAws_json1_1StreamProcessorDataSharingPreference(input.DataSharingPreferenceForUpdate, context),
        }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.ParametersToDelete != null && {
            ParametersToDelete: serializeAws_json1_1StreamProcessorParametersToDelete(input.ParametersToDelete, context),
        }),
        ...(input.RegionsOfInterestForUpdate != null && {
            RegionsOfInterestForUpdate: serializeAws_json1_1RegionsOfInterest(input.RegionsOfInterestForUpdate, context),
        }),
        ...(input.SettingsForUpdate != null && {
            SettingsForUpdate: serializeAws_json1_1StreamProcessorSettingsForUpdate(input.SettingsForUpdate, context),
        }),
    };
};
const serializeAws_json1_1VersionNames = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1Video = (input, context) => {
    return {
        ...(input.S3Object != null && { S3Object: serializeAws_json1_1S3Object(input.S3Object, context) }),
    };
};
const deserializeAws_json1_1AccessDeniedException = (output, context) => {
    return {
        Code: __expectString(output.Code),
        Logref: __expectString(output.Logref),
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1AgeRange = (output, context) => {
    return {
        High: __expectInt32(output.High),
        Low: __expectInt32(output.Low),
    };
};
const deserializeAws_json1_1Asset = (output, context) => {
    return {
        GroundTruthManifest: output.GroundTruthManifest != null
            ? deserializeAws_json1_1GroundTruthManifest(output.GroundTruthManifest, context)
            : undefined,
    };
};
const deserializeAws_json1_1Assets = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Asset(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1AudioMetadata = (output, context) => {
    return {
        Codec: __expectString(output.Codec),
        DurationMillis: __expectLong(output.DurationMillis),
        NumberOfChannels: __expectLong(output.NumberOfChannels),
        SampleRate: __expectLong(output.SampleRate),
    };
};
const deserializeAws_json1_1AudioMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AudioMetadata(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Beard = (output, context) => {
    return {
        Confidence: __limitedParseFloat32(output.Confidence),
        Value: __expectBoolean(output.Value),
    };
};
const deserializeAws_json1_1BodyParts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ProtectiveEquipmentBodyPart(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1BoundingBox = (output, context) => {
    return {
        Height: __limitedParseFloat32(output.Height),
        Left: __limitedParseFloat32(output.Left),
        Top: __limitedParseFloat32(output.Top),
        Width: __limitedParseFloat32(output.Width),
    };
};
const deserializeAws_json1_1Celebrity = (output, context) => {
    return {
        Face: output.Face != null ? deserializeAws_json1_1ComparedFace(output.Face, context) : undefined,
        Id: __expectString(output.Id),
        KnownGender: output.KnownGender != null ? deserializeAws_json1_1KnownGender(output.KnownGender, context) : undefined,
        MatchConfidence: __limitedParseFloat32(output.MatchConfidence),
        Name: __expectString(output.Name),
        Urls: output.Urls != null ? deserializeAws_json1_1Urls(output.Urls, context) : undefined,
    };
};
const deserializeAws_json1_1CelebrityDetail = (output, context) => {
    return {
        BoundingBox: output.BoundingBox != null ? deserializeAws_json1_1BoundingBox(output.BoundingBox, context) : undefined,
        Confidence: __limitedParseFloat32(output.Confidence),
        Face: output.Face != null ? deserializeAws_json1_1FaceDetail(output.Face, context) : undefined,
        Id: __expectString(output.Id),
        KnownGender: output.KnownGender != null ? deserializeAws_json1_1KnownGender(output.KnownGender, context) : undefined,
        Name: __expectString(output.Name),
        Urls: output.Urls != null ? deserializeAws_json1_1Urls(output.Urls, context) : undefined,
    };
};
const deserializeAws_json1_1CelebrityList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Celebrity(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1CelebrityRecognition = (output, context) => {
    return {
        Celebrity: output.Celebrity != null ? deserializeAws_json1_1CelebrityDetail(output.Celebrity, context) : undefined,
        Timestamp: __expectLong(output.Timestamp),
    };
};
const deserializeAws_json1_1CelebrityRecognitions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1CelebrityRecognition(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1CollectionIdList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ComparedFace = (output, context) => {
    return {
        BoundingBox: output.BoundingBox != null ? deserializeAws_json1_1BoundingBox(output.BoundingBox, context) : undefined,
        Confidence: __limitedParseFloat32(output.Confidence),
        Emotions: output.Emotions != null ? deserializeAws_json1_1Emotions(output.Emotions, context) : undefined,
        Landmarks: output.Landmarks != null ? deserializeAws_json1_1Landmarks(output.Landmarks, context) : undefined,
        Pose: output.Pose != null ? deserializeAws_json1_1Pose(output.Pose, context) : undefined,
        Quality: output.Quality != null ? deserializeAws_json1_1ImageQuality(output.Quality, context) : undefined,
        Smile: output.Smile != null ? deserializeAws_json1_1Smile(output.Smile, context) : undefined,
    };
};
const deserializeAws_json1_1ComparedFaceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ComparedFace(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ComparedSourceImageFace = (output, context) => {
    return {
        BoundingBox: output.BoundingBox != null ? deserializeAws_json1_1BoundingBox(output.BoundingBox, context) : undefined,
        Confidence: __limitedParseFloat32(output.Confidence),
    };
};
const deserializeAws_json1_1CompareFacesMatch = (output, context) => {
    return {
        Face: output.Face != null ? deserializeAws_json1_1ComparedFace(output.Face, context) : undefined,
        Similarity: __limitedParseFloat32(output.Similarity),
    };
};
const deserializeAws_json1_1CompareFacesMatchList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1CompareFacesMatch(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1CompareFacesResponse = (output, context) => {
    return {
        FaceMatches: output.FaceMatches != null ? deserializeAws_json1_1CompareFacesMatchList(output.FaceMatches, context) : undefined,
        SourceImageFace: output.SourceImageFace != null
            ? deserializeAws_json1_1ComparedSourceImageFace(output.SourceImageFace, context)
            : undefined,
        SourceImageOrientationCorrection: __expectString(output.SourceImageOrientationCorrection),
        TargetImageOrientationCorrection: __expectString(output.TargetImageOrientationCorrection),
        UnmatchedFaces: output.UnmatchedFaces != null
            ? deserializeAws_json1_1CompareFacesUnmatchList(output.UnmatchedFaces, context)
            : undefined,
    };
};
const deserializeAws_json1_1CompareFacesUnmatchList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ComparedFace(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ConnectedHomeLabels = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ConnectedHomeSettings = (output, context) => {
    return {
        Labels: output.Labels != null ? deserializeAws_json1_1ConnectedHomeLabels(output.Labels, context) : undefined,
        MinConfidence: __limitedParseFloat32(output.MinConfidence),
    };
};
const deserializeAws_json1_1ContentModerationDetection = (output, context) => {
    return {
        ModerationLabel: output.ModerationLabel != null
            ? deserializeAws_json1_1ModerationLabel(output.ModerationLabel, context)
            : undefined,
        Timestamp: __expectLong(output.Timestamp),
    };
};
const deserializeAws_json1_1ContentModerationDetections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ContentModerationDetection(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1CopyProjectVersionResponse = (output, context) => {
    return {
        ProjectVersionArn: __expectString(output.ProjectVersionArn),
    };
};
const deserializeAws_json1_1CoversBodyPart = (output, context) => {
    return {
        Confidence: __limitedParseFloat32(output.Confidence),
        Value: __expectBoolean(output.Value),
    };
};
const deserializeAws_json1_1CreateCollectionResponse = (output, context) => {
    return {
        CollectionArn: __expectString(output.CollectionArn),
        FaceModelVersion: __expectString(output.FaceModelVersion),
        StatusCode: __expectInt32(output.StatusCode),
    };
};
const deserializeAws_json1_1CreateDatasetResponse = (output, context) => {
    return {
        DatasetArn: __expectString(output.DatasetArn),
    };
};
const deserializeAws_json1_1CreateProjectResponse = (output, context) => {
    return {
        ProjectArn: __expectString(output.ProjectArn),
    };
};
const deserializeAws_json1_1CreateProjectVersionResponse = (output, context) => {
    return {
        ProjectVersionArn: __expectString(output.ProjectVersionArn),
    };
};
const deserializeAws_json1_1CreateStreamProcessorResponse = (output, context) => {
    return {
        StreamProcessorArn: __expectString(output.StreamProcessorArn),
    };
};
const deserializeAws_json1_1CustomLabel = (output, context) => {
    return {
        Confidence: __limitedParseFloat32(output.Confidence),
        Geometry: output.Geometry != null ? deserializeAws_json1_1Geometry(output.Geometry, context) : undefined,
        Name: __expectString(output.Name),
    };
};
const deserializeAws_json1_1CustomLabels = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1CustomLabel(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1DatasetDescription = (output, context) => {
    return {
        CreationTimestamp: output.CreationTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreationTimestamp)))
            : undefined,
        DatasetStats: output.DatasetStats != null ? deserializeAws_json1_1DatasetStats(output.DatasetStats, context) : undefined,
        LastUpdatedTimestamp: output.LastUpdatedTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTimestamp)))
            : undefined,
        Status: __expectString(output.Status),
        StatusMessage: __expectString(output.StatusMessage),
        StatusMessageCode: __expectString(output.StatusMessageCode),
    };
};
const deserializeAws_json1_1DatasetEntries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1DatasetLabelDescription = (output, context) => {
    return {
        LabelName: __expectString(output.LabelName),
        LabelStats: output.LabelStats != null ? deserializeAws_json1_1DatasetLabelStats(output.LabelStats, context) : undefined,
    };
};
const deserializeAws_json1_1DatasetLabelDescriptions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1DatasetLabelDescription(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1DatasetLabelStats = (output, context) => {
    return {
        BoundingBoxCount: __expectInt32(output.BoundingBoxCount),
        EntryCount: __expectInt32(output.EntryCount),
    };
};
const deserializeAws_json1_1DatasetMetadata = (output, context) => {
    return {
        CreationTimestamp: output.CreationTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreationTimestamp)))
            : undefined,
        DatasetArn: __expectString(output.DatasetArn),
        DatasetType: __expectString(output.DatasetType),
        Status: __expectString(output.Status),
        StatusMessage: __expectString(output.StatusMessage),
        StatusMessageCode: __expectString(output.StatusMessageCode),
    };
};
const deserializeAws_json1_1DatasetMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1DatasetMetadata(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1DatasetStats = (output, context) => {
    return {
        ErrorEntries: __expectInt32(output.ErrorEntries),
        LabeledEntries: __expectInt32(output.LabeledEntries),
        TotalEntries: __expectInt32(output.TotalEntries),
        TotalLabels: __expectInt32(output.TotalLabels),
    };
};
const deserializeAws_json1_1DeleteCollectionResponse = (output, context) => {
    return {
        StatusCode: __expectInt32(output.StatusCode),
    };
};
const deserializeAws_json1_1DeleteDatasetResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteFacesResponse = (output, context) => {
    return {
        DeletedFaces: output.DeletedFaces != null ? deserializeAws_json1_1FaceIdList(output.DeletedFaces, context) : undefined,
    };
};
const deserializeAws_json1_1DeleteProjectPolicyResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteProjectResponse = (output, context) => {
    return {
        Status: __expectString(output.Status),
    };
};
const deserializeAws_json1_1DeleteProjectVersionResponse = (output, context) => {
    return {
        Status: __expectString(output.Status),
    };
};
const deserializeAws_json1_1DeleteStreamProcessorResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1DescribeCollectionResponse = (output, context) => {
    return {
        CollectionARN: __expectString(output.CollectionARN),
        CreationTimestamp: output.CreationTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreationTimestamp)))
            : undefined,
        FaceCount: __expectLong(output.FaceCount),
        FaceModelVersion: __expectString(output.FaceModelVersion),
    };
};
const deserializeAws_json1_1DescribeDatasetResponse = (output, context) => {
    return {
        DatasetDescription: output.DatasetDescription != null
            ? deserializeAws_json1_1DatasetDescription(output.DatasetDescription, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeProjectsResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        ProjectDescriptions: output.ProjectDescriptions != null
            ? deserializeAws_json1_1ProjectDescriptions(output.ProjectDescriptions, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeProjectVersionsResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        ProjectVersionDescriptions: output.ProjectVersionDescriptions != null
            ? deserializeAws_json1_1ProjectVersionDescriptions(output.ProjectVersionDescriptions, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeStreamProcessorResponse = (output, context) => {
    return {
        CreationTimestamp: output.CreationTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreationTimestamp)))
            : undefined,
        DataSharingPreference: output.DataSharingPreference != null
            ? deserializeAws_json1_1StreamProcessorDataSharingPreference(output.DataSharingPreference, context)
            : undefined,
        Input: output.Input != null ? deserializeAws_json1_1StreamProcessorInput(output.Input, context) : undefined,
        KmsKeyId: __expectString(output.KmsKeyId),
        LastUpdateTimestamp: output.LastUpdateTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdateTimestamp)))
            : undefined,
        Name: __expectString(output.Name),
        NotificationChannel: output.NotificationChannel != null
            ? deserializeAws_json1_1StreamProcessorNotificationChannel(output.NotificationChannel, context)
            : undefined,
        Output: output.Output != null ? deserializeAws_json1_1StreamProcessorOutput(output.Output, context) : undefined,
        RegionsOfInterest: output.RegionsOfInterest != null
            ? deserializeAws_json1_1RegionsOfInterest(output.RegionsOfInterest, context)
            : undefined,
        RoleArn: __expectString(output.RoleArn),
        Settings: output.Settings != null ? deserializeAws_json1_1StreamProcessorSettings(output.Settings, context) : undefined,
        Status: __expectString(output.Status),
        StatusMessage: __expectString(output.StatusMessage),
        StreamProcessorArn: __expectString(output.StreamProcessorArn),
    };
};
const deserializeAws_json1_1DetectCustomLabelsResponse = (output, context) => {
    return {
        CustomLabels: output.CustomLabels != null ? deserializeAws_json1_1CustomLabels(output.CustomLabels, context) : undefined,
    };
};
const deserializeAws_json1_1DetectFacesResponse = (output, context) => {
    return {
        FaceDetails: output.FaceDetails != null ? deserializeAws_json1_1FaceDetailList(output.FaceDetails, context) : undefined,
        OrientationCorrection: __expectString(output.OrientationCorrection),
    };
};
const deserializeAws_json1_1DetectLabelsResponse = (output, context) => {
    return {
        LabelModelVersion: __expectString(output.LabelModelVersion),
        Labels: output.Labels != null ? deserializeAws_json1_1Labels(output.Labels, context) : undefined,
        OrientationCorrection: __expectString(output.OrientationCorrection),
    };
};
const deserializeAws_json1_1DetectModerationLabelsResponse = (output, context) => {
    return {
        HumanLoopActivationOutput: output.HumanLoopActivationOutput != null
            ? deserializeAws_json1_1HumanLoopActivationOutput(output.HumanLoopActivationOutput, context)
            : undefined,
        ModerationLabels: output.ModerationLabels != null
            ? deserializeAws_json1_1ModerationLabels(output.ModerationLabels, context)
            : undefined,
        ModerationModelVersion: __expectString(output.ModerationModelVersion),
    };
};
const deserializeAws_json1_1DetectProtectiveEquipmentResponse = (output, context) => {
    return {
        Persons: output.Persons != null ? deserializeAws_json1_1ProtectiveEquipmentPersons(output.Persons, context) : undefined,
        ProtectiveEquipmentModelVersion: __expectString(output.ProtectiveEquipmentModelVersion),
        Summary: output.Summary != null ? deserializeAws_json1_1ProtectiveEquipmentSummary(output.Summary, context) : undefined,
    };
};
const deserializeAws_json1_1DetectTextResponse = (output, context) => {
    return {
        TextDetections: output.TextDetections != null
            ? deserializeAws_json1_1TextDetectionList(output.TextDetections, context)
            : undefined,
        TextModelVersion: __expectString(output.TextModelVersion),
    };
};
const deserializeAws_json1_1DistributeDatasetEntriesResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1Emotion = (output, context) => {
    return {
        Confidence: __limitedParseFloat32(output.Confidence),
        Type: __expectString(output.Type),
    };
};
const deserializeAws_json1_1Emotions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Emotion(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1EquipmentDetection = (output, context) => {
    return {
        BoundingBox: output.BoundingBox != null ? deserializeAws_json1_1BoundingBox(output.BoundingBox, context) : undefined,
        Confidence: __limitedParseFloat32(output.Confidence),
        CoversBodyPart: output.CoversBodyPart != null ? deserializeAws_json1_1CoversBodyPart(output.CoversBodyPart, context) : undefined,
        Type: __expectString(output.Type),
    };
};
const deserializeAws_json1_1EquipmentDetections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1EquipmentDetection(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1EvaluationResult = (output, context) => {
    return {
        F1Score: __limitedParseFloat32(output.F1Score),
        Summary: output.Summary != null ? deserializeAws_json1_1Summary(output.Summary, context) : undefined,
    };
};
const deserializeAws_json1_1Eyeglasses = (output, context) => {
    return {
        Confidence: __limitedParseFloat32(output.Confidence),
        Value: __expectBoolean(output.Value),
    };
};
const deserializeAws_json1_1EyeOpen = (output, context) => {
    return {
        Confidence: __limitedParseFloat32(output.Confidence),
        Value: __expectBoolean(output.Value),
    };
};
const deserializeAws_json1_1Face = (output, context) => {
    return {
        BoundingBox: output.BoundingBox != null ? deserializeAws_json1_1BoundingBox(output.BoundingBox, context) : undefined,
        Confidence: __limitedParseFloat32(output.Confidence),
        ExternalImageId: __expectString(output.ExternalImageId),
        FaceId: __expectString(output.FaceId),
        ImageId: __expectString(output.ImageId),
        IndexFacesModelVersion: __expectString(output.IndexFacesModelVersion),
    };
};
const deserializeAws_json1_1FaceDetail = (output, context) => {
    return {
        AgeRange: output.AgeRange != null ? deserializeAws_json1_1AgeRange(output.AgeRange, context) : undefined,
        Beard: output.Beard != null ? deserializeAws_json1_1Beard(output.Beard, context) : undefined,
        BoundingBox: output.BoundingBox != null ? deserializeAws_json1_1BoundingBox(output.BoundingBox, context) : undefined,
        Confidence: __limitedParseFloat32(output.Confidence),
        Emotions: output.Emotions != null ? deserializeAws_json1_1Emotions(output.Emotions, context) : undefined,
        Eyeglasses: output.Eyeglasses != null ? deserializeAws_json1_1Eyeglasses(output.Eyeglasses, context) : undefined,
        EyesOpen: output.EyesOpen != null ? deserializeAws_json1_1EyeOpen(output.EyesOpen, context) : undefined,
        Gender: output.Gender != null ? deserializeAws_json1_1Gender(output.Gender, context) : undefined,
        Landmarks: output.Landmarks != null ? deserializeAws_json1_1Landmarks(output.Landmarks, context) : undefined,
        MouthOpen: output.MouthOpen != null ? deserializeAws_json1_1MouthOpen(output.MouthOpen, context) : undefined,
        Mustache: output.Mustache != null ? deserializeAws_json1_1Mustache(output.Mustache, context) : undefined,
        Pose: output.Pose != null ? deserializeAws_json1_1Pose(output.Pose, context) : undefined,
        Quality: output.Quality != null ? deserializeAws_json1_1ImageQuality(output.Quality, context) : undefined,
        Smile: output.Smile != null ? deserializeAws_json1_1Smile(output.Smile, context) : undefined,
        Sunglasses: output.Sunglasses != null ? deserializeAws_json1_1Sunglasses(output.Sunglasses, context) : undefined,
    };
};
const deserializeAws_json1_1FaceDetailList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1FaceDetail(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1FaceDetection = (output, context) => {
    return {
        Face: output.Face != null ? deserializeAws_json1_1FaceDetail(output.Face, context) : undefined,
        Timestamp: __expectLong(output.Timestamp),
    };
};
const deserializeAws_json1_1FaceDetections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1FaceDetection(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1FaceIdList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1FaceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Face(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1FaceMatch = (output, context) => {
    return {
        Face: output.Face != null ? deserializeAws_json1_1Face(output.Face, context) : undefined,
        Similarity: __limitedParseFloat32(output.Similarity),
    };
};
const deserializeAws_json1_1FaceMatchList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1FaceMatch(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1FaceModelVersionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1FaceRecord = (output, context) => {
    return {
        Face: output.Face != null ? deserializeAws_json1_1Face(output.Face, context) : undefined,
        FaceDetail: output.FaceDetail != null ? deserializeAws_json1_1FaceDetail(output.FaceDetail, context) : undefined,
    };
};
const deserializeAws_json1_1FaceRecordList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1FaceRecord(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1FaceSearchSettings = (output, context) => {
    return {
        CollectionId: __expectString(output.CollectionId),
        FaceMatchThreshold: __limitedParseFloat32(output.FaceMatchThreshold),
    };
};
const deserializeAws_json1_1Gender = (output, context) => {
    return {
        Confidence: __limitedParseFloat32(output.Confidence),
        Value: __expectString(output.Value),
    };
};
const deserializeAws_json1_1Geometry = (output, context) => {
    return {
        BoundingBox: output.BoundingBox != null ? deserializeAws_json1_1BoundingBox(output.BoundingBox, context) : undefined,
        Polygon: output.Polygon != null ? deserializeAws_json1_1Polygon(output.Polygon, context) : undefined,
    };
};
const deserializeAws_json1_1GetCelebrityInfoResponse = (output, context) => {
    return {
        KnownGender: output.KnownGender != null ? deserializeAws_json1_1KnownGender(output.KnownGender, context) : undefined,
        Name: __expectString(output.Name),
        Urls: output.Urls != null ? deserializeAws_json1_1Urls(output.Urls, context) : undefined,
    };
};
const deserializeAws_json1_1GetCelebrityRecognitionResponse = (output, context) => {
    return {
        Celebrities: output.Celebrities != null ? deserializeAws_json1_1CelebrityRecognitions(output.Celebrities, context) : undefined,
        JobStatus: __expectString(output.JobStatus),
        NextToken: __expectString(output.NextToken),
        StatusMessage: __expectString(output.StatusMessage),
        VideoMetadata: output.VideoMetadata != null ? deserializeAws_json1_1VideoMetadata(output.VideoMetadata, context) : undefined,
    };
};
const deserializeAws_json1_1GetContentModerationResponse = (output, context) => {
    return {
        JobStatus: __expectString(output.JobStatus),
        ModerationLabels: output.ModerationLabels != null
            ? deserializeAws_json1_1ContentModerationDetections(output.ModerationLabels, context)
            : undefined,
        ModerationModelVersion: __expectString(output.ModerationModelVersion),
        NextToken: __expectString(output.NextToken),
        StatusMessage: __expectString(output.StatusMessage),
        VideoMetadata: output.VideoMetadata != null ? deserializeAws_json1_1VideoMetadata(output.VideoMetadata, context) : undefined,
    };
};
const deserializeAws_json1_1GetFaceDetectionResponse = (output, context) => {
    return {
        Faces: output.Faces != null ? deserializeAws_json1_1FaceDetections(output.Faces, context) : undefined,
        JobStatus: __expectString(output.JobStatus),
        NextToken: __expectString(output.NextToken),
        StatusMessage: __expectString(output.StatusMessage),
        VideoMetadata: output.VideoMetadata != null ? deserializeAws_json1_1VideoMetadata(output.VideoMetadata, context) : undefined,
    };
};
const deserializeAws_json1_1GetFaceSearchResponse = (output, context) => {
    return {
        JobStatus: __expectString(output.JobStatus),
        NextToken: __expectString(output.NextToken),
        Persons: output.Persons != null ? deserializeAws_json1_1PersonMatches(output.Persons, context) : undefined,
        StatusMessage: __expectString(output.StatusMessage),
        VideoMetadata: output.VideoMetadata != null ? deserializeAws_json1_1VideoMetadata(output.VideoMetadata, context) : undefined,
    };
};
const deserializeAws_json1_1GetLabelDetectionResponse = (output, context) => {
    return {
        JobStatus: __expectString(output.JobStatus),
        LabelModelVersion: __expectString(output.LabelModelVersion),
        Labels: output.Labels != null ? deserializeAws_json1_1LabelDetections(output.Labels, context) : undefined,
        NextToken: __expectString(output.NextToken),
        StatusMessage: __expectString(output.StatusMessage),
        VideoMetadata: output.VideoMetadata != null ? deserializeAws_json1_1VideoMetadata(output.VideoMetadata, context) : undefined,
    };
};
const deserializeAws_json1_1GetPersonTrackingResponse = (output, context) => {
    return {
        JobStatus: __expectString(output.JobStatus),
        NextToken: __expectString(output.NextToken),
        Persons: output.Persons != null ? deserializeAws_json1_1PersonDetections(output.Persons, context) : undefined,
        StatusMessage: __expectString(output.StatusMessage),
        VideoMetadata: output.VideoMetadata != null ? deserializeAws_json1_1VideoMetadata(output.VideoMetadata, context) : undefined,
    };
};
const deserializeAws_json1_1GetSegmentDetectionResponse = (output, context) => {
    return {
        AudioMetadata: output.AudioMetadata != null ? deserializeAws_json1_1AudioMetadataList(output.AudioMetadata, context) : undefined,
        JobStatus: __expectString(output.JobStatus),
        NextToken: __expectString(output.NextToken),
        Segments: output.Segments != null ? deserializeAws_json1_1SegmentDetections(output.Segments, context) : undefined,
        SelectedSegmentTypes: output.SelectedSegmentTypes != null
            ? deserializeAws_json1_1SegmentTypesInfo(output.SelectedSegmentTypes, context)
            : undefined,
        StatusMessage: __expectString(output.StatusMessage),
        VideoMetadata: output.VideoMetadata != null ? deserializeAws_json1_1VideoMetadataList(output.VideoMetadata, context) : undefined,
    };
};
const deserializeAws_json1_1GetTextDetectionResponse = (output, context) => {
    return {
        JobStatus: __expectString(output.JobStatus),
        NextToken: __expectString(output.NextToken),
        StatusMessage: __expectString(output.StatusMessage),
        TextDetections: output.TextDetections != null
            ? deserializeAws_json1_1TextDetectionResults(output.TextDetections, context)
            : undefined,
        TextModelVersion: __expectString(output.TextModelVersion),
        VideoMetadata: output.VideoMetadata != null ? deserializeAws_json1_1VideoMetadata(output.VideoMetadata, context) : undefined,
    };
};
const deserializeAws_json1_1GroundTruthManifest = (output, context) => {
    return {
        S3Object: output.S3Object != null ? deserializeAws_json1_1S3Object(output.S3Object, context) : undefined,
    };
};
const deserializeAws_json1_1HumanLoopActivationOutput = (output, context) => {
    return {
        HumanLoopActivationConditionsEvaluationResults: output.HumanLoopActivationConditionsEvaluationResults != null
            ? new __LazyJsonString(output.HumanLoopActivationConditionsEvaluationResults)
            : undefined,
        HumanLoopActivationReasons: output.HumanLoopActivationReasons != null
            ? deserializeAws_json1_1HumanLoopActivationReasons(output.HumanLoopActivationReasons, context)
            : undefined,
        HumanLoopArn: __expectString(output.HumanLoopArn),
    };
};
const deserializeAws_json1_1HumanLoopActivationReasons = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1HumanLoopQuotaExceededException = (output, context) => {
    return {
        Code: __expectString(output.Code),
        Logref: __expectString(output.Logref),
        Message: __expectString(output.Message),
        QuotaCode: __expectString(output.QuotaCode),
        ResourceType: __expectString(output.ResourceType),
        ServiceCode: __expectString(output.ServiceCode),
    };
};
const deserializeAws_json1_1IdempotentParameterMismatchException = (output, context) => {
    return {
        Code: __expectString(output.Code),
        Logref: __expectString(output.Logref),
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1ImageQuality = (output, context) => {
    return {
        Brightness: __limitedParseFloat32(output.Brightness),
        Sharpness: __limitedParseFloat32(output.Sharpness),
    };
};
const deserializeAws_json1_1ImageTooLargeException = (output, context) => {
    return {
        Code: __expectString(output.Code),
        Logref: __expectString(output.Logref),
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1IndexFacesResponse = (output, context) => {
    return {
        FaceModelVersion: __expectString(output.FaceModelVersion),
        FaceRecords: output.FaceRecords != null ? deserializeAws_json1_1FaceRecordList(output.FaceRecords, context) : undefined,
        OrientationCorrection: __expectString(output.OrientationCorrection),
        UnindexedFaces: output.UnindexedFaces != null ? deserializeAws_json1_1UnindexedFaces(output.UnindexedFaces, context) : undefined,
    };
};
const deserializeAws_json1_1Instance = (output, context) => {
    return {
        BoundingBox: output.BoundingBox != null ? deserializeAws_json1_1BoundingBox(output.BoundingBox, context) : undefined,
        Confidence: __limitedParseFloat32(output.Confidence),
    };
};
const deserializeAws_json1_1Instances = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Instance(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1InternalServerError = (output, context) => {
    return {
        Code: __expectString(output.Code),
        Logref: __expectString(output.Logref),
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1InvalidImageFormatException = (output, context) => {
    return {
        Code: __expectString(output.Code),
        Logref: __expectString(output.Logref),
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1InvalidPaginationTokenException = (output, context) => {
    return {
        Code: __expectString(output.Code),
        Logref: __expectString(output.Logref),
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1InvalidParameterException = (output, context) => {
    return {
        Code: __expectString(output.Code),
        Logref: __expectString(output.Logref),
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1InvalidPolicyRevisionIdException = (output, context) => {
    return {
        Code: __expectString(output.Code),
        Logref: __expectString(output.Logref),
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1InvalidS3ObjectException = (output, context) => {
    return {
        Code: __expectString(output.Code),
        Logref: __expectString(output.Logref),
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1KinesisDataStream = (output, context) => {
    return {
        Arn: __expectString(output.Arn),
    };
};
const deserializeAws_json1_1KinesisVideoStream = (output, context) => {
    return {
        Arn: __expectString(output.Arn),
    };
};
const deserializeAws_json1_1KnownGender = (output, context) => {
    return {
        Type: __expectString(output.Type),
    };
};
const deserializeAws_json1_1Label = (output, context) => {
    return {
        Confidence: __limitedParseFloat32(output.Confidence),
        Instances: output.Instances != null ? deserializeAws_json1_1Instances(output.Instances, context) : undefined,
        Name: __expectString(output.Name),
        Parents: output.Parents != null ? deserializeAws_json1_1Parents(output.Parents, context) : undefined,
    };
};
const deserializeAws_json1_1LabelDetection = (output, context) => {
    return {
        Label: output.Label != null ? deserializeAws_json1_1Label(output.Label, context) : undefined,
        Timestamp: __expectLong(output.Timestamp),
    };
};
const deserializeAws_json1_1LabelDetections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1LabelDetection(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Labels = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Label(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Landmark = (output, context) => {
    return {
        Type: __expectString(output.Type),
        X: __limitedParseFloat32(output.X),
        Y: __limitedParseFloat32(output.Y),
    };
};
const deserializeAws_json1_1Landmarks = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Landmark(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1LimitExceededException = (output, context) => {
    return {
        Code: __expectString(output.Code),
        Logref: __expectString(output.Logref),
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1ListCollectionsResponse = (output, context) => {
    return {
        CollectionIds: output.CollectionIds != null ? deserializeAws_json1_1CollectionIdList(output.CollectionIds, context) : undefined,
        FaceModelVersions: output.FaceModelVersions != null
            ? deserializeAws_json1_1FaceModelVersionList(output.FaceModelVersions, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1ListDatasetEntriesResponse = (output, context) => {
    return {
        DatasetEntries: output.DatasetEntries != null ? deserializeAws_json1_1DatasetEntries(output.DatasetEntries, context) : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1ListDatasetLabelsResponse = (output, context) => {
    return {
        DatasetLabelDescriptions: output.DatasetLabelDescriptions != null
            ? deserializeAws_json1_1DatasetLabelDescriptions(output.DatasetLabelDescriptions, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1ListFacesResponse = (output, context) => {
    return {
        FaceModelVersion: __expectString(output.FaceModelVersion),
        Faces: output.Faces != null ? deserializeAws_json1_1FaceList(output.Faces, context) : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1ListProjectPoliciesResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        ProjectPolicies: output.ProjectPolicies != null
            ? deserializeAws_json1_1ProjectPolicies(output.ProjectPolicies, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListStreamProcessorsResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        StreamProcessors: output.StreamProcessors != null
            ? deserializeAws_json1_1StreamProcessorList(output.StreamProcessors, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListTagsForResourceResponse = (output, context) => {
    return {
        Tags: output.Tags != null ? deserializeAws_json1_1TagMap(output.Tags, context) : undefined,
    };
};
const deserializeAws_json1_1MalformedPolicyDocumentException = (output, context) => {
    return {
        Code: __expectString(output.Code),
        Logref: __expectString(output.Logref),
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1ModerationLabel = (output, context) => {
    return {
        Confidence: __limitedParseFloat32(output.Confidence),
        Name: __expectString(output.Name),
        ParentName: __expectString(output.ParentName),
    };
};
const deserializeAws_json1_1ModerationLabels = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ModerationLabel(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1MouthOpen = (output, context) => {
    return {
        Confidence: __limitedParseFloat32(output.Confidence),
        Value: __expectBoolean(output.Value),
    };
};
const deserializeAws_json1_1Mustache = (output, context) => {
    return {
        Confidence: __limitedParseFloat32(output.Confidence),
        Value: __expectBoolean(output.Value),
    };
};
const deserializeAws_json1_1OutputConfig = (output, context) => {
    return {
        S3Bucket: __expectString(output.S3Bucket),
        S3KeyPrefix: __expectString(output.S3KeyPrefix),
    };
};
const deserializeAws_json1_1Parent = (output, context) => {
    return {
        Name: __expectString(output.Name),
    };
};
const deserializeAws_json1_1Parents = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Parent(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1PersonDetail = (output, context) => {
    return {
        BoundingBox: output.BoundingBox != null ? deserializeAws_json1_1BoundingBox(output.BoundingBox, context) : undefined,
        Face: output.Face != null ? deserializeAws_json1_1FaceDetail(output.Face, context) : undefined,
        Index: __expectLong(output.Index),
    };
};
const deserializeAws_json1_1PersonDetection = (output, context) => {
    return {
        Person: output.Person != null ? deserializeAws_json1_1PersonDetail(output.Person, context) : undefined,
        Timestamp: __expectLong(output.Timestamp),
    };
};
const deserializeAws_json1_1PersonDetections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1PersonDetection(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1PersonMatch = (output, context) => {
    return {
        FaceMatches: output.FaceMatches != null ? deserializeAws_json1_1FaceMatchList(output.FaceMatches, context) : undefined,
        Person: output.Person != null ? deserializeAws_json1_1PersonDetail(output.Person, context) : undefined,
        Timestamp: __expectLong(output.Timestamp),
    };
};
const deserializeAws_json1_1PersonMatches = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1PersonMatch(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Point = (output, context) => {
    return {
        X: __limitedParseFloat32(output.X),
        Y: __limitedParseFloat32(output.Y),
    };
};
const deserializeAws_json1_1Polygon = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Point(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Pose = (output, context) => {
    return {
        Pitch: __limitedParseFloat32(output.Pitch),
        Roll: __limitedParseFloat32(output.Roll),
        Yaw: __limitedParseFloat32(output.Yaw),
    };
};
const deserializeAws_json1_1ProjectDescription = (output, context) => {
    return {
        CreationTimestamp: output.CreationTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreationTimestamp)))
            : undefined,
        Datasets: output.Datasets != null ? deserializeAws_json1_1DatasetMetadataList(output.Datasets, context) : undefined,
        ProjectArn: __expectString(output.ProjectArn),
        Status: __expectString(output.Status),
    };
};
const deserializeAws_json1_1ProjectDescriptions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ProjectDescription(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ProjectPolicies = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ProjectPolicy(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ProjectPolicy = (output, context) => {
    return {
        CreationTimestamp: output.CreationTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreationTimestamp)))
            : undefined,
        LastUpdatedTimestamp: output.LastUpdatedTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTimestamp)))
            : undefined,
        PolicyDocument: __expectString(output.PolicyDocument),
        PolicyName: __expectString(output.PolicyName),
        PolicyRevisionId: __expectString(output.PolicyRevisionId),
        ProjectArn: __expectString(output.ProjectArn),
    };
};
const deserializeAws_json1_1ProjectVersionDescription = (output, context) => {
    return {
        BillableTrainingTimeInSeconds: __expectLong(output.BillableTrainingTimeInSeconds),
        CreationTimestamp: output.CreationTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreationTimestamp)))
            : undefined,
        EvaluationResult: output.EvaluationResult != null
            ? deserializeAws_json1_1EvaluationResult(output.EvaluationResult, context)
            : undefined,
        KmsKeyId: __expectString(output.KmsKeyId),
        ManifestSummary: output.ManifestSummary != null
            ? deserializeAws_json1_1GroundTruthManifest(output.ManifestSummary, context)
            : undefined,
        MaxInferenceUnits: __expectInt32(output.MaxInferenceUnits),
        MinInferenceUnits: __expectInt32(output.MinInferenceUnits),
        OutputConfig: output.OutputConfig != null ? deserializeAws_json1_1OutputConfig(output.OutputConfig, context) : undefined,
        ProjectVersionArn: __expectString(output.ProjectVersionArn),
        SourceProjectVersionArn: __expectString(output.SourceProjectVersionArn),
        Status: __expectString(output.Status),
        StatusMessage: __expectString(output.StatusMessage),
        TestingDataResult: output.TestingDataResult != null
            ? deserializeAws_json1_1TestingDataResult(output.TestingDataResult, context)
            : undefined,
        TrainingDataResult: output.TrainingDataResult != null
            ? deserializeAws_json1_1TrainingDataResult(output.TrainingDataResult, context)
            : undefined,
        TrainingEndTimestamp: output.TrainingEndTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.TrainingEndTimestamp)))
            : undefined,
    };
};
const deserializeAws_json1_1ProjectVersionDescriptions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ProjectVersionDescription(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ProtectiveEquipmentBodyPart = (output, context) => {
    return {
        Confidence: __limitedParseFloat32(output.Confidence),
        EquipmentDetections: output.EquipmentDetections != null
            ? deserializeAws_json1_1EquipmentDetections(output.EquipmentDetections, context)
            : undefined,
        Name: __expectString(output.Name),
    };
};
const deserializeAws_json1_1ProtectiveEquipmentPerson = (output, context) => {
    return {
        BodyParts: output.BodyParts != null ? deserializeAws_json1_1BodyParts(output.BodyParts, context) : undefined,
        BoundingBox: output.BoundingBox != null ? deserializeAws_json1_1BoundingBox(output.BoundingBox, context) : undefined,
        Confidence: __limitedParseFloat32(output.Confidence),
        Id: __expectInt32(output.Id),
    };
};
const deserializeAws_json1_1ProtectiveEquipmentPersonIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectInt32(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ProtectiveEquipmentPersons = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ProtectiveEquipmentPerson(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ProtectiveEquipmentSummary = (output, context) => {
    return {
        PersonsIndeterminate: output.PersonsIndeterminate != null
            ? deserializeAws_json1_1ProtectiveEquipmentPersonIds(output.PersonsIndeterminate, context)
            : undefined,
        PersonsWithRequiredEquipment: output.PersonsWithRequiredEquipment != null
            ? deserializeAws_json1_1ProtectiveEquipmentPersonIds(output.PersonsWithRequiredEquipment, context)
            : undefined,
        PersonsWithoutRequiredEquipment: output.PersonsWithoutRequiredEquipment != null
            ? deserializeAws_json1_1ProtectiveEquipmentPersonIds(output.PersonsWithoutRequiredEquipment, context)
            : undefined,
    };
};
const deserializeAws_json1_1ProvisionedThroughputExceededException = (output, context) => {
    return {
        Code: __expectString(output.Code),
        Logref: __expectString(output.Logref),
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1PutProjectPolicyResponse = (output, context) => {
    return {
        PolicyRevisionId: __expectString(output.PolicyRevisionId),
    };
};
const deserializeAws_json1_1Reasons = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1RecognizeCelebritiesResponse = (output, context) => {
    return {
        CelebrityFaces: output.CelebrityFaces != null ? deserializeAws_json1_1CelebrityList(output.CelebrityFaces, context) : undefined,
        OrientationCorrection: __expectString(output.OrientationCorrection),
        UnrecognizedFaces: output.UnrecognizedFaces != null
            ? deserializeAws_json1_1ComparedFaceList(output.UnrecognizedFaces, context)
            : undefined,
    };
};
const deserializeAws_json1_1RegionOfInterest = (output, context) => {
    return {
        BoundingBox: output.BoundingBox != null ? deserializeAws_json1_1BoundingBox(output.BoundingBox, context) : undefined,
        Polygon: output.Polygon != null ? deserializeAws_json1_1Polygon(output.Polygon, context) : undefined,
    };
};
const deserializeAws_json1_1RegionsOfInterest = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RegionOfInterest(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ResourceAlreadyExistsException = (output, context) => {
    return {
        Code: __expectString(output.Code),
        Logref: __expectString(output.Logref),
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1ResourceInUseException = (output, context) => {
    return {
        Code: __expectString(output.Code),
        Logref: __expectString(output.Logref),
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1ResourceNotFoundException = (output, context) => {
    return {
        Code: __expectString(output.Code),
        Logref: __expectString(output.Logref),
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1ResourceNotReadyException = (output, context) => {
    return {
        Code: __expectString(output.Code),
        Logref: __expectString(output.Logref),
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1S3Destination = (output, context) => {
    return {
        Bucket: __expectString(output.Bucket),
        KeyPrefix: __expectString(output.KeyPrefix),
    };
};
const deserializeAws_json1_1S3Object = (output, context) => {
    return {
        Bucket: __expectString(output.Bucket),
        Name: __expectString(output.Name),
        Version: __expectString(output.Version),
    };
};
const deserializeAws_json1_1SearchFacesByImageResponse = (output, context) => {
    return {
        FaceMatches: output.FaceMatches != null ? deserializeAws_json1_1FaceMatchList(output.FaceMatches, context) : undefined,
        FaceModelVersion: __expectString(output.FaceModelVersion),
        SearchedFaceBoundingBox: output.SearchedFaceBoundingBox != null
            ? deserializeAws_json1_1BoundingBox(output.SearchedFaceBoundingBox, context)
            : undefined,
        SearchedFaceConfidence: __limitedParseFloat32(output.SearchedFaceConfidence),
    };
};
const deserializeAws_json1_1SearchFacesResponse = (output, context) => {
    return {
        FaceMatches: output.FaceMatches != null ? deserializeAws_json1_1FaceMatchList(output.FaceMatches, context) : undefined,
        FaceModelVersion: __expectString(output.FaceModelVersion),
        SearchedFaceId: __expectString(output.SearchedFaceId),
    };
};
const deserializeAws_json1_1SegmentDetection = (output, context) => {
    return {
        DurationFrames: __expectLong(output.DurationFrames),
        DurationMillis: __expectLong(output.DurationMillis),
        DurationSMPTE: __expectString(output.DurationSMPTE),
        EndFrameNumber: __expectLong(output.EndFrameNumber),
        EndTimecodeSMPTE: __expectString(output.EndTimecodeSMPTE),
        EndTimestampMillis: __expectLong(output.EndTimestampMillis),
        ShotSegment: output.ShotSegment != null ? deserializeAws_json1_1ShotSegment(output.ShotSegment, context) : undefined,
        StartFrameNumber: __expectLong(output.StartFrameNumber),
        StartTimecodeSMPTE: __expectString(output.StartTimecodeSMPTE),
        StartTimestampMillis: __expectLong(output.StartTimestampMillis),
        TechnicalCueSegment: output.TechnicalCueSegment != null
            ? deserializeAws_json1_1TechnicalCueSegment(output.TechnicalCueSegment, context)
            : undefined,
        Type: __expectString(output.Type),
    };
};
const deserializeAws_json1_1SegmentDetections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SegmentDetection(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1SegmentTypeInfo = (output, context) => {
    return {
        ModelVersion: __expectString(output.ModelVersion),
        Type: __expectString(output.Type),
    };
};
const deserializeAws_json1_1SegmentTypesInfo = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SegmentTypeInfo(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ServiceQuotaExceededException = (output, context) => {
    return {
        Code: __expectString(output.Code),
        Logref: __expectString(output.Logref),
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1ShotSegment = (output, context) => {
    return {
        Confidence: __limitedParseFloat32(output.Confidence),
        Index: __expectLong(output.Index),
    };
};
const deserializeAws_json1_1Smile = (output, context) => {
    return {
        Confidence: __limitedParseFloat32(output.Confidence),
        Value: __expectBoolean(output.Value),
    };
};
const deserializeAws_json1_1StartCelebrityRecognitionResponse = (output, context) => {
    return {
        JobId: __expectString(output.JobId),
    };
};
const deserializeAws_json1_1StartContentModerationResponse = (output, context) => {
    return {
        JobId: __expectString(output.JobId),
    };
};
const deserializeAws_json1_1StartFaceDetectionResponse = (output, context) => {
    return {
        JobId: __expectString(output.JobId),
    };
};
const deserializeAws_json1_1StartFaceSearchResponse = (output, context) => {
    return {
        JobId: __expectString(output.JobId),
    };
};
const deserializeAws_json1_1StartLabelDetectionResponse = (output, context) => {
    return {
        JobId: __expectString(output.JobId),
    };
};
const deserializeAws_json1_1StartPersonTrackingResponse = (output, context) => {
    return {
        JobId: __expectString(output.JobId),
    };
};
const deserializeAws_json1_1StartProjectVersionResponse = (output, context) => {
    return {
        Status: __expectString(output.Status),
    };
};
const deserializeAws_json1_1StartSegmentDetectionResponse = (output, context) => {
    return {
        JobId: __expectString(output.JobId),
    };
};
const deserializeAws_json1_1StartStreamProcessorResponse = (output, context) => {
    return {
        SessionId: __expectString(output.SessionId),
    };
};
const deserializeAws_json1_1StartTextDetectionResponse = (output, context) => {
    return {
        JobId: __expectString(output.JobId),
    };
};
const deserializeAws_json1_1StopProjectVersionResponse = (output, context) => {
    return {
        Status: __expectString(output.Status),
    };
};
const deserializeAws_json1_1StopStreamProcessorResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1StreamProcessor = (output, context) => {
    return {
        Name: __expectString(output.Name),
        Status: __expectString(output.Status),
    };
};
const deserializeAws_json1_1StreamProcessorDataSharingPreference = (output, context) => {
    return {
        OptIn: __expectBoolean(output.OptIn),
    };
};
const deserializeAws_json1_1StreamProcessorInput = (output, context) => {
    return {
        KinesisVideoStream: output.KinesisVideoStream != null
            ? deserializeAws_json1_1KinesisVideoStream(output.KinesisVideoStream, context)
            : undefined,
    };
};
const deserializeAws_json1_1StreamProcessorList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1StreamProcessor(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1StreamProcessorNotificationChannel = (output, context) => {
    return {
        SNSTopicArn: __expectString(output.SNSTopicArn),
    };
};
const deserializeAws_json1_1StreamProcessorOutput = (output, context) => {
    return {
        KinesisDataStream: output.KinesisDataStream != null
            ? deserializeAws_json1_1KinesisDataStream(output.KinesisDataStream, context)
            : undefined,
        S3Destination: output.S3Destination != null ? deserializeAws_json1_1S3Destination(output.S3Destination, context) : undefined,
    };
};
const deserializeAws_json1_1StreamProcessorSettings = (output, context) => {
    return {
        ConnectedHome: output.ConnectedHome != null
            ? deserializeAws_json1_1ConnectedHomeSettings(output.ConnectedHome, context)
            : undefined,
        FaceSearch: output.FaceSearch != null ? deserializeAws_json1_1FaceSearchSettings(output.FaceSearch, context) : undefined,
    };
};
const deserializeAws_json1_1Summary = (output, context) => {
    return {
        S3Object: output.S3Object != null ? deserializeAws_json1_1S3Object(output.S3Object, context) : undefined,
    };
};
const deserializeAws_json1_1Sunglasses = (output, context) => {
    return {
        Confidence: __limitedParseFloat32(output.Confidence),
        Value: __expectBoolean(output.Value),
    };
};
const deserializeAws_json1_1TagMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: __expectString(value),
        };
    }, {});
};
const deserializeAws_json1_1TagResourceResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1TechnicalCueSegment = (output, context) => {
    return {
        Confidence: __limitedParseFloat32(output.Confidence),
        Type: __expectString(output.Type),
    };
};
const deserializeAws_json1_1TestingData = (output, context) => {
    return {
        Assets: output.Assets != null ? deserializeAws_json1_1Assets(output.Assets, context) : undefined,
        AutoCreate: __expectBoolean(output.AutoCreate),
    };
};
const deserializeAws_json1_1TestingDataResult = (output, context) => {
    return {
        Input: output.Input != null ? deserializeAws_json1_1TestingData(output.Input, context) : undefined,
        Output: output.Output != null ? deserializeAws_json1_1TestingData(output.Output, context) : undefined,
        Validation: output.Validation != null ? deserializeAws_json1_1ValidationData(output.Validation, context) : undefined,
    };
};
const deserializeAws_json1_1TextDetection = (output, context) => {
    return {
        Confidence: __limitedParseFloat32(output.Confidence),
        DetectedText: __expectString(output.DetectedText),
        Geometry: output.Geometry != null ? deserializeAws_json1_1Geometry(output.Geometry, context) : undefined,
        Id: __expectInt32(output.Id),
        ParentId: __expectInt32(output.ParentId),
        Type: __expectString(output.Type),
    };
};
const deserializeAws_json1_1TextDetectionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1TextDetection(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1TextDetectionResult = (output, context) => {
    return {
        TextDetection: output.TextDetection != null ? deserializeAws_json1_1TextDetection(output.TextDetection, context) : undefined,
        Timestamp: __expectLong(output.Timestamp),
    };
};
const deserializeAws_json1_1TextDetectionResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1TextDetectionResult(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ThrottlingException = (output, context) => {
    return {
        Code: __expectString(output.Code),
        Logref: __expectString(output.Logref),
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1TrainingData = (output, context) => {
    return {
        Assets: output.Assets != null ? deserializeAws_json1_1Assets(output.Assets, context) : undefined,
    };
};
const deserializeAws_json1_1TrainingDataResult = (output, context) => {
    return {
        Input: output.Input != null ? deserializeAws_json1_1TrainingData(output.Input, context) : undefined,
        Output: output.Output != null ? deserializeAws_json1_1TrainingData(output.Output, context) : undefined,
        Validation: output.Validation != null ? deserializeAws_json1_1ValidationData(output.Validation, context) : undefined,
    };
};
const deserializeAws_json1_1UnindexedFace = (output, context) => {
    return {
        FaceDetail: output.FaceDetail != null ? deserializeAws_json1_1FaceDetail(output.FaceDetail, context) : undefined,
        Reasons: output.Reasons != null ? deserializeAws_json1_1Reasons(output.Reasons, context) : undefined,
    };
};
const deserializeAws_json1_1UnindexedFaces = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1UnindexedFace(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1UntagResourceResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1UpdateDatasetEntriesResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1UpdateStreamProcessorResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1Urls = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ValidationData = (output, context) => {
    return {
        Assets: output.Assets != null ? deserializeAws_json1_1Assets(output.Assets, context) : undefined,
    };
};
const deserializeAws_json1_1VideoMetadata = (output, context) => {
    return {
        Codec: __expectString(output.Codec),
        ColorRange: __expectString(output.ColorRange),
        DurationMillis: __expectLong(output.DurationMillis),
        Format: __expectString(output.Format),
        FrameHeight: __expectLong(output.FrameHeight),
        FrameRate: __limitedParseFloat32(output.FrameRate),
        FrameWidth: __expectLong(output.FrameWidth),
    };
};
const deserializeAws_json1_1VideoMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1VideoMetadata(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1VideoTooLargeException = (output, context) => {
    return {
        Code: __expectString(output.Code),
        Logref: __expectString(output.Logref),
        Message: __expectString(output.Message),
    };
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
