"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromString = exports.fromArrayBuffer = void 0;
var is_array_buffer_1 = require("@aws-sdk/is-array-buffer");
var buffer_1 = require("buffer");
function fromArrayBuffer(input, offset, length) {
    if (offset === void 0) { offset = 0; }
    if (length === void 0) { length = input.byteLength - offset; }
    if (!is_array_buffer_1.isArrayBuffer(input)) {
        throw new Error("argument passed to fromArrayBuffer was not an ArrayBuffer");
    }
    if (typeof buffer_1.Buffer.from === "function" && buffer_1.Buffer.from !== Uint8Array.from) {
        return buffer_1.Buffer.from(input, offset, length);
    }
    // Any version of node that supports the optional offset and length
    // parameters, which were added in Node 6.0.0, will support Buffer.from and
    // have already returned. Throw if offset is not 0 or if length differs from
    // the underlying buffer's length.
    if (offset !== 0 || length !== input.byteLength) {
        throw new Error("Unable to convert TypedArray to Buffer in Node " + process.version);
    }
    return new buffer_1.Buffer(input);
}
exports.fromArrayBuffer = fromArrayBuffer;
function fromString(input, encoding) {
    if (typeof input !== "string") {
        throw new Error("argument passed to fromString was not a string");
    }
    if (typeof buffer_1.Buffer.from === "function" && buffer_1.Buffer.from !== Uint8Array.from) {
        return buffer_1.Buffer.from(input, encoding);
    }
    return new buffer_1.Buffer(input, encoding);
}
exports.fromString = fromString;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw0REFBeUQ7QUFDekQsaUNBQWdDO0FBRWhDLFNBQWdCLGVBQWUsQ0FBQyxLQUFrQixFQUFFLE1BQVUsRUFBRSxNQUEwQztJQUF0RCx1QkFBQSxFQUFBLFVBQVU7SUFBRSx1QkFBQSxFQUFBLFNBQWlCLEtBQUssQ0FBQyxVQUFVLEdBQUcsTUFBTTtJQUN4RyxJQUFJLENBQUMsK0JBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN6QixNQUFNLElBQUksS0FBSyxDQUFDLDJEQUEyRCxDQUFDLENBQUM7S0FDOUU7SUFFRCxJQUFJLE9BQU8sZUFBTSxDQUFDLElBQUksS0FBSyxVQUFVLElBQUksZUFBTSxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsSUFBSSxFQUFFO1FBQ3hFLE9BQU8sZUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQzNDO0lBRUQsbUVBQW1FO0lBQ25FLDJFQUEyRTtJQUMzRSw0RUFBNEU7SUFDNUUsa0NBQWtDO0lBQ2xDLElBQUksTUFBTSxLQUFLLENBQUMsSUFBSSxNQUFNLEtBQUssS0FBSyxDQUFDLFVBQVUsRUFBRTtRQUMvQyxNQUFNLElBQUksS0FBSyxDQUFDLG9EQUFrRCxPQUFPLENBQUMsT0FBUyxDQUFDLENBQUM7S0FDdEY7SUFDRCxPQUFPLElBQUksZUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzNCLENBQUM7QUFqQkQsMENBaUJDO0FBRUQsU0FBZ0IsVUFBVSxDQUFDLEtBQWEsRUFBRSxRQUF5QjtJQUNqRSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLGdEQUFnRCxDQUFDLENBQUM7S0FDbkU7SUFFRCxJQUFJLE9BQU8sZUFBTSxDQUFDLElBQUksS0FBSyxVQUFVLElBQUksZUFBTSxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsSUFBSSxFQUFFO1FBQ3hFLE9BQU8sZUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsUUFBZSxDQUFDLENBQUM7S0FDNUM7SUFFRCxPQUFPLElBQUksZUFBTSxDQUFDLEtBQUssRUFBRSxRQUFlLENBQUMsQ0FBQztBQUM1QyxDQUFDO0FBVkQsZ0NBVUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0FycmF5QnVmZmVyIH0gZnJvbSBcIkBhd3Mtc2RrL2lzLWFycmF5LWJ1ZmZlclwiO1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSBcImJ1ZmZlclwiO1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyKGlucHV0OiBBcnJheUJ1ZmZlciwgb2Zmc2V0ID0gMCwgbGVuZ3RoOiBudW1iZXIgPSBpbnB1dC5ieXRlTGVuZ3RoIC0gb2Zmc2V0KTogQnVmZmVyIHtcbiAgaWYgKCFpc0FycmF5QnVmZmVyKGlucHV0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImFyZ3VtZW50IHBhc3NlZCB0byBmcm9tQXJyYXlCdWZmZXIgd2FzIG5vdCBhbiBBcnJheUJ1ZmZlclwiKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgQnVmZmVyLmZyb20gPT09IFwiZnVuY3Rpb25cIiAmJiBCdWZmZXIuZnJvbSAhPT0gVWludDhBcnJheS5mcm9tKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGlucHV0LCBvZmZzZXQsIGxlbmd0aCk7XG4gIH1cblxuICAvLyBBbnkgdmVyc2lvbiBvZiBub2RlIHRoYXQgc3VwcG9ydHMgdGhlIG9wdGlvbmFsIG9mZnNldCBhbmQgbGVuZ3RoXG4gIC8vIHBhcmFtZXRlcnMsIHdoaWNoIHdlcmUgYWRkZWQgaW4gTm9kZSA2LjAuMCwgd2lsbCBzdXBwb3J0IEJ1ZmZlci5mcm9tIGFuZFxuICAvLyBoYXZlIGFscmVhZHkgcmV0dXJuZWQuIFRocm93IGlmIG9mZnNldCBpcyBub3QgMCBvciBpZiBsZW5ndGggZGlmZmVycyBmcm9tXG4gIC8vIHRoZSB1bmRlcmx5aW5nIGJ1ZmZlcidzIGxlbmd0aC5cbiAgaWYgKG9mZnNldCAhPT0gMCB8fCBsZW5ndGggIT09IGlucHV0LmJ5dGVMZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBjb252ZXJ0IFR5cGVkQXJyYXkgdG8gQnVmZmVyIGluIE5vZGUgJHtwcm9jZXNzLnZlcnNpb259YCk7XG4gIH1cbiAgcmV0dXJuIG5ldyBCdWZmZXIoaW5wdXQpO1xufVxuZXhwb3J0IHR5cGUgU3RyaW5nRW5jb2RpbmcgPSBcImFzY2lpXCIgfCBcInV0ZjhcIiB8IFwidXRmMTZsZVwiIHwgXCJ1Y3MyXCIgfCBcImJhc2U2NFwiIHwgXCJsYXRpbjFcIiB8IFwiYmluYXJ5XCIgfCBcImhleFwiO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21TdHJpbmcoaW5wdXQ6IHN0cmluZywgZW5jb2Rpbmc/OiBTdHJpbmdFbmNvZGluZyk6IEJ1ZmZlciB7XG4gIGlmICh0eXBlb2YgaW5wdXQgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJhcmd1bWVudCBwYXNzZWQgdG8gZnJvbVN0cmluZyB3YXMgbm90IGEgc3RyaW5nXCIpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBCdWZmZXIuZnJvbSA9PT0gXCJmdW5jdGlvblwiICYmIEJ1ZmZlci5mcm9tICE9PSBVaW50OEFycmF5LmZyb20pIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oaW5wdXQsIGVuY29kaW5nIGFzIGFueSk7XG4gIH1cblxuICByZXR1cm4gbmV3IEJ1ZmZlcihpbnB1dCwgZW5jb2RpbmcgYXMgYW55KTtcbn1cbiJdfQ==