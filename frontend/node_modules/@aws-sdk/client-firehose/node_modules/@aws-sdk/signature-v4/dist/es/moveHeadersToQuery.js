import { __assign, __values } from "tslib";
import { cloneRequest } from "./cloneRequest";
/**
 * @internal
 */
export function moveHeadersToQuery(request) {
    var e_1, _a;
    var _b = typeof request.clone === "function" ? request.clone() : cloneRequest(request), headers = _b.headers, _c = _b.query, query = _c === void 0 ? {} : _c;
    try {
        for (var _d = __values(Object.keys(headers)), _e = _d.next(); !_e.done; _e = _d.next()) {
            var name = _e.value;
            var lname = name.toLowerCase();
            if (lname.substr(0, 6) === "x-amz-") {
                query[name] = headers[name];
                delete headers[name];
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return __assign(__assign({}, request), { headers: headers,
        query: query });
}
//# sourceMappingURL=moveHeadersToQuery.js.map