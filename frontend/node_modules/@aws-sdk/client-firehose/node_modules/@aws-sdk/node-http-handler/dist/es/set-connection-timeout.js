export function setConnectionTimeout(request, reject, timeoutInMs) {
    if (timeoutInMs === void 0) { timeoutInMs = 0; }
    if (!timeoutInMs) {
        return;
    }
    request.on("socket", function (socket) {
        var _this = this;
        if (socket.connecting) {
            // Throw a connecting timeout error unless a connection is made within x time
            var timeoutId_1 = setTimeout(function () {
                // abort the request to destroy it
                _this.abort();
                var timeoutError = new Error("Socket timed out without establishing a connection within " + timeoutInMs + " ms");
                timeoutError.name = "TimeoutError";
                reject(timeoutError);
            }, timeoutInMs);
            // if the connection was established, cancel the timeout
            socket.on("connect", function () {
                clearTimeout(timeoutId_1);
            });
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0LWNvbm5lY3Rpb24tdGltZW91dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXQtY29ubmVjdGlvbi10aW1lb3V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxPQUFzQixFQUFFLE1BQTRCLEVBQUUsV0FBZTtJQUFmLDRCQUFBLEVBQUEsZUFBZTtJQUN4RyxJQUFJLENBQUMsV0FBVyxFQUFFO1FBQ2hCLE9BQU87S0FDUjtJQUVELE9BQU8sQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLFVBQStCLE1BQWM7UUFBN0MsaUJBaUJwQjtRQWhCQyxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7WUFDckIsNkVBQTZFO1lBQzdFLElBQU0sV0FBUyxHQUFHLFVBQVUsQ0FBQztnQkFDM0Isa0NBQWtDO2dCQUNsQyxLQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBRWIsSUFBTSxZQUFZLEdBQUcsSUFBSSxLQUFLLENBQUMsK0RBQTZELFdBQVcsUUFBSyxDQUFDLENBQUM7Z0JBQzlHLFlBQVksQ0FBQyxJQUFJLEdBQUcsY0FBYyxDQUFDO2dCQUNuQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDdkIsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBRWhCLHdEQUF3RDtZQUN4RCxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRTtnQkFDbkIsWUFBWSxDQUFDLFdBQVMsQ0FBQyxDQUFDO1lBQzFCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbGllbnRSZXF1ZXN0IH0gZnJvbSBcImh0dHBcIjtcbmltcG9ydCB7IFNvY2tldCB9IGZyb20gXCJuZXRcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldENvbm5lY3Rpb25UaW1lb3V0KHJlcXVlc3Q6IENsaWVudFJlcXVlc3QsIHJlamVjdDogKGVycjogRXJyb3IpID0+IHZvaWQsIHRpbWVvdXRJbk1zID0gMCkge1xuICBpZiAoIXRpbWVvdXRJbk1zKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmVxdWVzdC5vbihcInNvY2tldFwiLCBmdW5jdGlvbiAodGhpczogQ2xpZW50UmVxdWVzdCwgc29ja2V0OiBTb2NrZXQpIHtcbiAgICBpZiAoc29ja2V0LmNvbm5lY3RpbmcpIHtcbiAgICAgIC8vIFRocm93IGEgY29ubmVjdGluZyB0aW1lb3V0IGVycm9yIHVubGVzcyBhIGNvbm5lY3Rpb24gaXMgbWFkZSB3aXRoaW4geCB0aW1lXG4gICAgICBjb25zdCB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgLy8gYWJvcnQgdGhlIHJlcXVlc3QgdG8gZGVzdHJveSBpdFxuICAgICAgICB0aGlzLmFib3J0KCk7XG5cbiAgICAgICAgY29uc3QgdGltZW91dEVycm9yID0gbmV3IEVycm9yKGBTb2NrZXQgdGltZWQgb3V0IHdpdGhvdXQgZXN0YWJsaXNoaW5nIGEgY29ubmVjdGlvbiB3aXRoaW4gJHt0aW1lb3V0SW5Nc30gbXNgKTtcbiAgICAgICAgdGltZW91dEVycm9yLm5hbWUgPSBcIlRpbWVvdXRFcnJvclwiO1xuICAgICAgICByZWplY3QodGltZW91dEVycm9yKTtcbiAgICAgIH0sIHRpbWVvdXRJbk1zKTtcblxuICAgICAgLy8gaWYgdGhlIGNvbm5lY3Rpb24gd2FzIGVzdGFibGlzaGVkLCBjYW5jZWwgdGhlIHRpbWVvdXRcbiAgICAgIHNvY2tldC5vbihcImNvbm5lY3RcIiwgKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=