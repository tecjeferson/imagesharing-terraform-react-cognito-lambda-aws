"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventStreamMarshaller = void 0;
var tslib_1 = require("tslib");
var eventstream_marshaller_1 = require("@aws-sdk/eventstream-marshaller");
var getChunkedStream_1 = require("./getChunkedStream");
var getUnmarshalledStream_1 = require("./getUnmarshalledStream");
var EventStreamMarshaller = /** @class */ (function () {
    function EventStreamMarshaller(_a) {
        var utf8Encoder = _a.utf8Encoder, utf8Decoder = _a.utf8Decoder;
        this.eventMarshaller = new eventstream_marshaller_1.EventStreamMarshaller(utf8Encoder, utf8Decoder);
        this.utfEncoder = utf8Encoder;
    }
    EventStreamMarshaller.prototype.deserialize = function (body, deserializer) {
        var chunkedStream = getChunkedStream_1.getChunkedStream(body);
        var unmarshalledStream = getUnmarshalledStream_1.getUnmarshalledStream(chunkedStream, {
            eventMarshaller: this.eventMarshaller,
            deserializer: deserializer,
            toUtf8: this.utfEncoder,
        });
        return unmarshalledStream;
    };
    EventStreamMarshaller.prototype.serialize = function (input, serializer) {
        var _a;
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var self = this;
        var serializedIterator = function () {
            return tslib_1.__asyncGenerator(this, arguments, function () {
                var input_1, input_1_1, chunk, payloadBuf, e_1_1;
                var e_1, _a;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 7, 8, 13]);
                            input_1 = tslib_1.__asyncValues(input);
                            _b.label = 1;
                        case 1: return [4 /*yield*/, tslib_1.__await(input_1.next())];
                        case 2:
                            if (!(input_1_1 = _b.sent(), !input_1_1.done)) return [3 /*break*/, 6];
                            chunk = input_1_1.value;
                            payloadBuf = self.eventMarshaller.marshall(serializer(chunk));
                            return [4 /*yield*/, tslib_1.__await(payloadBuf)];
                        case 3: return [4 /*yield*/, _b.sent()];
                        case 4:
                            _b.sent();
                            _b.label = 5;
                        case 5: return [3 /*break*/, 1];
                        case 6: return [3 /*break*/, 13];
                        case 7:
                            e_1_1 = _b.sent();
                            e_1 = { error: e_1_1 };
                            return [3 /*break*/, 13];
                        case 8:
                            _b.trys.push([8, , 11, 12]);
                            if (!(input_1_1 && !input_1_1.done && (_a = input_1.return))) return [3 /*break*/, 10];
                            return [4 /*yield*/, tslib_1.__await(_a.call(input_1))];
                        case 9:
                            _b.sent();
                            _b.label = 10;
                        case 10: return [3 /*break*/, 12];
                        case 11:
                            if (e_1) throw e_1.error;
                            return [7 /*endfinally*/];
                        case 12: return [7 /*endfinally*/];
                        case 13: return [4 /*yield*/, tslib_1.__await(new Uint8Array(0))];
                        case 14: 
                        // Ending frame
                        return [4 /*yield*/, _b.sent()];
                        case 15:
                            // Ending frame
                            _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        return _a = {},
            _a[Symbol.asyncIterator] = serializedIterator,
            _a;
    };
    return EventStreamMarshaller;
}());
exports.EventStreamMarshaller = EventStreamMarshaller;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRTdHJlYW1NYXJzaGFsbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL0V2ZW50U3RyZWFtTWFyc2hhbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsMEVBQTJGO0FBRzNGLHVEQUFzRDtBQUN0RCxpRUFBZ0U7QUFTaEU7SUFHRSwrQkFBWSxFQUEwRDtZQUF4RCxXQUFXLGlCQUFBLEVBQUUsV0FBVyxpQkFBQTtRQUNwQyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksOENBQWUsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLFVBQVUsR0FBRyxXQUFXLENBQUM7SUFDaEMsQ0FBQztJQUVELDJDQUFXLEdBQVgsVUFDRSxJQUErQixFQUMvQixZQUFpRTtRQUVqRSxJQUFNLGFBQWEsR0FBRyxtQ0FBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QyxJQUFNLGtCQUFrQixHQUFHLDZDQUFxQixDQUFDLGFBQWEsRUFBRTtZQUM5RCxlQUFlLEVBQUUsSUFBSSxDQUFDLGVBQWU7WUFDckMsWUFBWSxjQUFBO1lBQ1osTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVO1NBQ3hCLENBQUMsQ0FBQztRQUNILE9BQU8sa0JBQWtCLENBQUM7SUFDNUIsQ0FBQztJQUVELHlDQUFTLEdBQVQsVUFBYSxLQUF1QixFQUFFLFVBQWlDOztRQUNyRSw0REFBNEQ7UUFDNUQsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLElBQU0sa0JBQWtCLEdBQUc7Ozs7Ozs7OzRCQUNDLFVBQUEsc0JBQUEsS0FBSyxDQUFBOzs7Ozs0QkFBZCxLQUFLLGtCQUFBLENBQUE7NEJBQ2QsVUFBVSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2lFQUM5RCxVQUFVO2dDQUFoQixnQ0FBZ0I7OzRCQUFoQixTQUFnQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztzRUFHYixJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUM7O3dCQUR2QixlQUFlO3dCQUNmLGdDQUF1Qjs7NEJBRHZCLGVBQWU7NEJBQ2YsU0FBdUIsQ0FBQzs7Ozs7U0FDekIsQ0FBQztRQUNGO1lBQ0UsR0FBQyxNQUFNLENBQUMsYUFBYSxJQUFHLGtCQUFrQjtlQUMxQztJQUNKLENBQUM7SUFDSCw0QkFBQztBQUFELENBQUMsQUFwQ0QsSUFvQ0M7QUFwQ1ksc0RBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRTdHJlYW1NYXJzaGFsbGVyIGFzIEV2ZW50TWFyc2hhbGxlciB9IGZyb20gXCJAYXdzLXNkay9ldmVudHN0cmVhbS1tYXJzaGFsbGVyXCI7XG5pbXBvcnQgeyBEZWNvZGVyLCBFbmNvZGVyLCBFdmVudFN0cmVhbU1hcnNoYWxsZXIgYXMgSUV2ZW50U3RyZWFtTWFyc2hhbGxlciwgTWVzc2FnZSB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuXG5pbXBvcnQgeyBnZXRDaHVua2VkU3RyZWFtIH0gZnJvbSBcIi4vZ2V0Q2h1bmtlZFN0cmVhbVwiO1xuaW1wb3J0IHsgZ2V0VW5tYXJzaGFsbGVkU3RyZWFtIH0gZnJvbSBcIi4vZ2V0VW5tYXJzaGFsbGVkU3RyZWFtXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXZlbnRTdHJlYW1NYXJzaGFsbGVyIGV4dGVuZHMgSUV2ZW50U3RyZWFtTWFyc2hhbGxlciB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50U3RyZWFtTWFyc2hhbGxlck9wdGlvbnMge1xuICB1dGY4RW5jb2RlcjogRW5jb2RlcjtcbiAgdXRmOERlY29kZXI6IERlY29kZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBFdmVudFN0cmVhbU1hcnNoYWxsZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IGV2ZW50TWFyc2hhbGxlcjogRXZlbnRNYXJzaGFsbGVyO1xuICBwcml2YXRlIHJlYWRvbmx5IHV0ZkVuY29kZXI6IEVuY29kZXI7XG4gIGNvbnN0cnVjdG9yKHsgdXRmOEVuY29kZXIsIHV0ZjhEZWNvZGVyIH06IEV2ZW50U3RyZWFtTWFyc2hhbGxlck9wdGlvbnMpIHtcbiAgICB0aGlzLmV2ZW50TWFyc2hhbGxlciA9IG5ldyBFdmVudE1hcnNoYWxsZXIodXRmOEVuY29kZXIsIHV0ZjhEZWNvZGVyKTtcbiAgICB0aGlzLnV0ZkVuY29kZXIgPSB1dGY4RW5jb2RlcjtcbiAgfVxuXG4gIGRlc2VyaWFsaXplPFQ+KFxuICAgIGJvZHk6IEFzeW5jSXRlcmFibGU8VWludDhBcnJheT4sXG4gICAgZGVzZXJpYWxpemVyOiAoaW5wdXQ6IHsgW2V2ZW50OiBzdHJpbmddOiBNZXNzYWdlIH0pID0+IFByb21pc2U8VD5cbiAgKTogQXN5bmNJdGVyYWJsZTxUPiB7XG4gICAgY29uc3QgY2h1bmtlZFN0cmVhbSA9IGdldENodW5rZWRTdHJlYW0oYm9keSk7XG4gICAgY29uc3QgdW5tYXJzaGFsbGVkU3RyZWFtID0gZ2V0VW5tYXJzaGFsbGVkU3RyZWFtKGNodW5rZWRTdHJlYW0sIHtcbiAgICAgIGV2ZW50TWFyc2hhbGxlcjogdGhpcy5ldmVudE1hcnNoYWxsZXIsXG4gICAgICBkZXNlcmlhbGl6ZXIsXG4gICAgICB0b1V0Zjg6IHRoaXMudXRmRW5jb2RlcixcbiAgICB9KTtcbiAgICByZXR1cm4gdW5tYXJzaGFsbGVkU3RyZWFtO1xuICB9XG5cbiAgc2VyaWFsaXplPFQ+KGlucHV0OiBBc3luY0l0ZXJhYmxlPFQ+LCBzZXJpYWxpemVyOiAoZXZlbnQ6IFQpID0+IE1lc3NhZ2UpOiBBc3luY0l0ZXJhYmxlPFVpbnQ4QXJyYXk+IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXNcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCBzZXJpYWxpemVkSXRlcmF0b3IgPSBhc3luYyBmdW5jdGlvbiogKCkge1xuICAgICAgZm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiBpbnB1dCkge1xuICAgICAgICBjb25zdCBwYXlsb2FkQnVmID0gc2VsZi5ldmVudE1hcnNoYWxsZXIubWFyc2hhbGwoc2VyaWFsaXplcihjaHVuaykpO1xuICAgICAgICB5aWVsZCBwYXlsb2FkQnVmO1xuICAgICAgfVxuICAgICAgLy8gRW5kaW5nIGZyYW1lXG4gICAgICB5aWVsZCBuZXcgVWludDhBcnJheSgwKTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdOiBzZXJpYWxpemVkSXRlcmF0b3IsXG4gICAgfTtcbiAgfVxufVxuIl19