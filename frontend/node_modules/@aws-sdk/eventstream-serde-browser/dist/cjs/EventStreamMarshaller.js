"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventStreamMarshaller = void 0;
var eventstream_marshaller_1 = require("@aws-sdk/eventstream-marshaller");
var eventstream_serde_universal_1 = require("@aws-sdk/eventstream-serde-universal");
var utils_1 = require("./utils");
/**
 * Utility class used to serialize and deserialize event streams in
 * browsers and ReactNative.
 *
 * In browsers where ReadableStream API is available:
 * * deserialize from ReadableStream to an async iterable of output structure
 * * serialize from async iterable of input structure to ReadableStream
 * In ReactNative where only async iterable API is available:
 * * deserialize from async iterable of binaries to async iterable of output structure
 * * serialize from async iterable of input structure to async iterable of binaries
 *
 * We use ReadableStream API in browsers because of the consistency with other
 * streaming operations, where ReadableStream API is used to denote streaming data.
 * Whereas in ReactNative, ReadableStream API is not available, we use async iterable
 * for streaming data although it has lower throughput.
 */
var EventStreamMarshaller = /** @class */ (function () {
    function EventStreamMarshaller(_a) {
        var utf8Encoder = _a.utf8Encoder, utf8Decoder = _a.utf8Decoder;
        this.eventMarshaller = new eventstream_marshaller_1.EventStreamMarshaller(utf8Encoder, utf8Decoder);
        this.universalMarshaller = new eventstream_serde_universal_1.EventStreamMarshaller({
            utf8Decoder: utf8Decoder,
            utf8Encoder: utf8Encoder,
        });
    }
    EventStreamMarshaller.prototype.deserialize = function (body, deserializer) {
        var bodyIterable = isReadableStream(body) ? utils_1.readableStreamtoIterable(body) : body;
        return this.universalMarshaller.deserialize(bodyIterable, deserializer);
    };
    /**
     * Generate a stream that serialize events into stream of binary chunks;
     *
     * Caveat is that streaming request payload doesn't work on browser with native
     * xhr or fetch handler currently because they don't support upload streaming.
     * reference:
     * * https://bugs.chromium.org/p/chromium/issues/detail?id=688906
     * * https://bugzilla.mozilla.org/show_bug.cgi?id=1387483
     *
     */
    EventStreamMarshaller.prototype.serialize = function (input, serializer) {
        var serialziedIterable = this.universalMarshaller.serialize(input, serializer);
        return typeof ReadableStream === "function" ? utils_1.iterableToReadableStream(serialziedIterable) : serialziedIterable;
    };
    return EventStreamMarshaller;
}());
exports.EventStreamMarshaller = EventStreamMarshaller;
var isReadableStream = function (body) {
    return typeof ReadableStream === "function" && body instanceof ReadableStream;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRTdHJlYW1NYXJzaGFsbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL0V2ZW50U3RyZWFtTWFyc2hhbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwRUFBMkY7QUFDM0Ysb0ZBQStHO0FBRy9HLGlDQUE2RTtBQVM3RTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFDSDtJQUdFLCtCQUFZLEVBQTBEO1lBQXhELFdBQVcsaUJBQUEsRUFBRSxXQUFXLGlCQUFBO1FBQ3BDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSw4Q0FBZSxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNyRSxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxtREFBOEIsQ0FBQztZQUM1RCxXQUFXLGFBQUE7WUFDWCxXQUFXLGFBQUE7U0FDWixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsMkNBQVcsR0FBWCxVQUNFLElBQTRELEVBQzVELFlBQWlFO1FBRWpFLElBQU0sWUFBWSxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQ0FBd0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3BGLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVEOzs7Ozs7Ozs7T0FTRztJQUNILHlDQUFTLEdBQVQsVUFBYSxLQUF1QixFQUFFLFVBQWlDO1FBQ3JFLElBQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDakYsT0FBTyxPQUFPLGNBQWMsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLGdDQUF3QixDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDO0lBQ2xILENBQUM7SUFDSCw0QkFBQztBQUFELENBQUMsQUFqQ0QsSUFpQ0M7QUFqQ1ksc0RBQXFCO0FBbUNsQyxJQUFNLGdCQUFnQixHQUFHLFVBQUMsSUFBUztJQUNqQyxPQUFBLE9BQU8sY0FBYyxLQUFLLFVBQVUsSUFBSSxJQUFJLFlBQVksY0FBYztBQUF0RSxDQUFzRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRTdHJlYW1NYXJzaGFsbGVyIGFzIEV2ZW50TWFyc2hhbGxlciB9IGZyb20gXCJAYXdzLXNkay9ldmVudHN0cmVhbS1tYXJzaGFsbGVyXCI7XG5pbXBvcnQgeyBFdmVudFN0cmVhbU1hcnNoYWxsZXIgYXMgVW5pdmVyc2FsRXZlbnRTdHJlYW1NYXJzaGFsbGVyIH0gZnJvbSBcIkBhd3Mtc2RrL2V2ZW50c3RyZWFtLXNlcmRlLXVuaXZlcnNhbFwiO1xuaW1wb3J0IHsgRGVjb2RlciwgRW5jb2RlciwgRXZlbnRTdHJlYW1NYXJzaGFsbGVyIGFzIElFdmVudFN0cmVhbU1hcnNoYWxsZXIsIE1lc3NhZ2UgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuaW1wb3J0IHsgaXRlcmFibGVUb1JlYWRhYmxlU3RyZWFtLCByZWFkYWJsZVN0cmVhbXRvSXRlcmFibGUgfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50U3RyZWFtTWFyc2hhbGxlciBleHRlbmRzIElFdmVudFN0cmVhbU1hcnNoYWxsZXIge31cblxuZXhwb3J0IGludGVyZmFjZSBFdmVudFN0cmVhbU1hcnNoYWxsZXJPcHRpb25zIHtcbiAgdXRmOEVuY29kZXI6IEVuY29kZXI7XG4gIHV0ZjhEZWNvZGVyOiBEZWNvZGVyO1xufVxuXG4vKipcbiAqIFV0aWxpdHkgY2xhc3MgdXNlZCB0byBzZXJpYWxpemUgYW5kIGRlc2VyaWFsaXplIGV2ZW50IHN0cmVhbXMgaW5cbiAqIGJyb3dzZXJzIGFuZCBSZWFjdE5hdGl2ZS5cbiAqXG4gKiBJbiBicm93c2VycyB3aGVyZSBSZWFkYWJsZVN0cmVhbSBBUEkgaXMgYXZhaWxhYmxlOlxuICogKiBkZXNlcmlhbGl6ZSBmcm9tIFJlYWRhYmxlU3RyZWFtIHRvIGFuIGFzeW5jIGl0ZXJhYmxlIG9mIG91dHB1dCBzdHJ1Y3R1cmVcbiAqICogc2VyaWFsaXplIGZyb20gYXN5bmMgaXRlcmFibGUgb2YgaW5wdXQgc3RydWN0dXJlIHRvIFJlYWRhYmxlU3RyZWFtXG4gKiBJbiBSZWFjdE5hdGl2ZSB3aGVyZSBvbmx5IGFzeW5jIGl0ZXJhYmxlIEFQSSBpcyBhdmFpbGFibGU6XG4gKiAqIGRlc2VyaWFsaXplIGZyb20gYXN5bmMgaXRlcmFibGUgb2YgYmluYXJpZXMgdG8gYXN5bmMgaXRlcmFibGUgb2Ygb3V0cHV0IHN0cnVjdHVyZVxuICogKiBzZXJpYWxpemUgZnJvbSBhc3luYyBpdGVyYWJsZSBvZiBpbnB1dCBzdHJ1Y3R1cmUgdG8gYXN5bmMgaXRlcmFibGUgb2YgYmluYXJpZXNcbiAqXG4gKiBXZSB1c2UgUmVhZGFibGVTdHJlYW0gQVBJIGluIGJyb3dzZXJzIGJlY2F1c2Ugb2YgdGhlIGNvbnNpc3RlbmN5IHdpdGggb3RoZXJcbiAqIHN0cmVhbWluZyBvcGVyYXRpb25zLCB3aGVyZSBSZWFkYWJsZVN0cmVhbSBBUEkgaXMgdXNlZCB0byBkZW5vdGUgc3RyZWFtaW5nIGRhdGEuXG4gKiBXaGVyZWFzIGluIFJlYWN0TmF0aXZlLCBSZWFkYWJsZVN0cmVhbSBBUEkgaXMgbm90IGF2YWlsYWJsZSwgd2UgdXNlIGFzeW5jIGl0ZXJhYmxlXG4gKiBmb3Igc3RyZWFtaW5nIGRhdGEgYWx0aG91Z2ggaXQgaGFzIGxvd2VyIHRocm91Z2hwdXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBFdmVudFN0cmVhbU1hcnNoYWxsZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IGV2ZW50TWFyc2hhbGxlcjogRXZlbnRNYXJzaGFsbGVyO1xuICBwcml2YXRlIHJlYWRvbmx5IHVuaXZlcnNhbE1hcnNoYWxsZXI6IFVuaXZlcnNhbEV2ZW50U3RyZWFtTWFyc2hhbGxlcjtcbiAgY29uc3RydWN0b3IoeyB1dGY4RW5jb2RlciwgdXRmOERlY29kZXIgfTogRXZlbnRTdHJlYW1NYXJzaGFsbGVyT3B0aW9ucykge1xuICAgIHRoaXMuZXZlbnRNYXJzaGFsbGVyID0gbmV3IEV2ZW50TWFyc2hhbGxlcih1dGY4RW5jb2RlciwgdXRmOERlY29kZXIpO1xuICAgIHRoaXMudW5pdmVyc2FsTWFyc2hhbGxlciA9IG5ldyBVbml2ZXJzYWxFdmVudFN0cmVhbU1hcnNoYWxsZXIoe1xuICAgICAgdXRmOERlY29kZXIsXG4gICAgICB1dGY4RW5jb2RlcixcbiAgICB9KTtcbiAgfVxuXG4gIGRlc2VyaWFsaXplPFQ+KFxuICAgIGJvZHk6IFJlYWRhYmxlU3RyZWFtPFVpbnQ4QXJyYXk+IHwgQXN5bmNJdGVyYWJsZTxVaW50OEFycmF5PixcbiAgICBkZXNlcmlhbGl6ZXI6IChpbnB1dDogeyBbZXZlbnQ6IHN0cmluZ106IE1lc3NhZ2UgfSkgPT4gUHJvbWlzZTxUPlxuICApOiBBc3luY0l0ZXJhYmxlPFQ+IHtcbiAgICBjb25zdCBib2R5SXRlcmFibGUgPSBpc1JlYWRhYmxlU3RyZWFtKGJvZHkpID8gcmVhZGFibGVTdHJlYW10b0l0ZXJhYmxlKGJvZHkpIDogYm9keTtcbiAgICByZXR1cm4gdGhpcy51bml2ZXJzYWxNYXJzaGFsbGVyLmRlc2VyaWFsaXplKGJvZHlJdGVyYWJsZSwgZGVzZXJpYWxpemVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIHN0cmVhbSB0aGF0IHNlcmlhbGl6ZSBldmVudHMgaW50byBzdHJlYW0gb2YgYmluYXJ5IGNodW5rcztcbiAgICpcbiAgICogQ2F2ZWF0IGlzIHRoYXQgc3RyZWFtaW5nIHJlcXVlc3QgcGF5bG9hZCBkb2Vzbid0IHdvcmsgb24gYnJvd3NlciB3aXRoIG5hdGl2ZVxuICAgKiB4aHIgb3IgZmV0Y2ggaGFuZGxlciBjdXJyZW50bHkgYmVjYXVzZSB0aGV5IGRvbid0IHN1cHBvcnQgdXBsb2FkIHN0cmVhbWluZy5cbiAgICogcmVmZXJlbmNlOlxuICAgKiAqIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTY4ODkwNlxuICAgKiAqIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEzODc0ODNcbiAgICpcbiAgICovXG4gIHNlcmlhbGl6ZTxUPihpbnB1dDogQXN5bmNJdGVyYWJsZTxUPiwgc2VyaWFsaXplcjogKGV2ZW50OiBUKSA9PiBNZXNzYWdlKTogUmVhZGFibGVTdHJlYW0gfCBBc3luY0l0ZXJhYmxlPFVpbnQ4QXJyYXk+IHtcbiAgICBjb25zdCBzZXJpYWx6aWVkSXRlcmFibGUgPSB0aGlzLnVuaXZlcnNhbE1hcnNoYWxsZXIuc2VyaWFsaXplKGlucHV0LCBzZXJpYWxpemVyKTtcbiAgICByZXR1cm4gdHlwZW9mIFJlYWRhYmxlU3RyZWFtID09PSBcImZ1bmN0aW9uXCIgPyBpdGVyYWJsZVRvUmVhZGFibGVTdHJlYW0oc2VyaWFsemllZEl0ZXJhYmxlKSA6IHNlcmlhbHppZWRJdGVyYWJsZTtcbiAgfVxufVxuXG5jb25zdCBpc1JlYWRhYmxlU3RyZWFtID0gKGJvZHk6IGFueSk6IGJvZHkgaXMgUmVhZGFibGVTdHJlYW0gPT5cbiAgdHlwZW9mIFJlYWRhYmxlU3RyZWFtID09PSBcImZ1bmN0aW9uXCIgJiYgYm9keSBpbnN0YW5jZW9mIFJlYWRhYmxlU3RyZWFtO1xuIl19