"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventStreamMarshaller = void 0;
var tslib_1 = require("tslib");
var eventstream_marshaller_1 = require("@aws-sdk/eventstream-marshaller");
var eventstream_serde_universal_1 = require("@aws-sdk/eventstream-serde-universal");
var stream_1 = require("stream");
var utils_1 = require("./utils");
var EventStreamMarshaller = /** @class */ (function () {
    function EventStreamMarshaller(_a) {
        var utf8Encoder = _a.utf8Encoder, utf8Decoder = _a.utf8Decoder;
        this.eventMarshaller = new eventstream_marshaller_1.EventStreamMarshaller(utf8Encoder, utf8Decoder);
        this.universalMarshaller = new eventstream_serde_universal_1.EventStreamMarshaller({
            utf8Decoder: utf8Decoder,
            utf8Encoder: utf8Encoder,
        });
    }
    EventStreamMarshaller.prototype.deserialize = function (body, deserializer) {
        //should use stream[Symbol.asyncIterable] when the api is stable
        //reference: https://nodejs.org/docs/latest-v11.x/api/stream.html#stream_readable_symbol_asynciterator
        var bodyIterable = typeof body[Symbol.asyncIterator] === "function" ? body : utils_1.readabletoIterable(body);
        return this.universalMarshaller.deserialize(bodyIterable, deserializer);
    };
    EventStreamMarshaller.prototype.serialize = function (input, serializer) {
        var serializedIterable = this.universalMarshaller.serialize(input, serializer);
        if (typeof stream_1.Readable.from === "function") {
            //reference: https://nodejs.org/dist/latest-v13.x/docs/api/stream.html#stream_new_stream_readable_options
            return stream_1.Readable.from(serializedIterable);
        }
        else {
            var iterator_1 = serializedIterable[Symbol.asyncIterator]();
            var serializedStream_1 = new stream_1.Readable({
                autoDestroy: true,
                objectMode: true,
                read: function () {
                    return tslib_1.__awaiter(this, void 0, void 0, function () {
                        var _this = this;
                        return tslib_1.__generator(this, function (_a) {
                            iterator_1
                                .next()
                                .then(function (_a) {
                                var done = _a.done, value = _a.value;
                                if (done) {
                                    _this.push(null);
                                }
                                else {
                                    _this.push(value);
                                }
                            })
                                .catch(function (err) {
                                _this.destroy(err);
                            });
                            return [2 /*return*/];
                        });
                    });
                },
            });
            //TODO: use 'autoDestroy' when targeting Node 11
            serializedStream_1.on("error", function () {
                serializedStream_1.destroy();
            });
            serializedStream_1.on("end", function () {
                serializedStream_1.destroy();
            });
            return serializedStream_1;
        }
    };
    return EventStreamMarshaller;
}());
exports.EventStreamMarshaller = EventStreamMarshaller;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRTdHJlYW1NYXJzaGFsbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL0V2ZW50U3RyZWFtTWFyc2hhbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsMEVBQTJGO0FBQzNGLG9GQUErRztBQUUvRyxpQ0FBa0M7QUFFbEMsaUNBQTZDO0FBUzdDO0lBR0UsK0JBQVksRUFBMEQ7WUFBeEQsV0FBVyxpQkFBQSxFQUFFLFdBQVcsaUJBQUE7UUFDcEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLDhDQUFlLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3JFLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLG1EQUE4QixDQUFDO1lBQzVELFdBQVcsYUFBQTtZQUNYLFdBQVcsYUFBQTtTQUNaLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCwyQ0FBVyxHQUFYLFVBQWUsSUFBYyxFQUFFLFlBQWlFO1FBQzlGLGdFQUFnRTtRQUNoRSxzR0FBc0c7UUFDdEcsSUFBTSxZQUFZLEdBQ2hCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsMEJBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckYsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRUQseUNBQVMsR0FBVCxVQUFhLEtBQXVCLEVBQUUsVUFBaUM7UUFDckUsSUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNqRixJQUFJLE9BQU8saUJBQVEsQ0FBQyxJQUFJLEtBQUssVUFBVSxFQUFFO1lBQ3ZDLHlHQUF5RztZQUN6RyxPQUFPLGlCQUFRLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7U0FDMUM7YUFBTTtZQUNMLElBQU0sVUFBUSxHQUFHLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1lBQzVELElBQU0sa0JBQWdCLEdBQUcsSUFBSSxpQkFBUSxDQUFDO2dCQUNwQyxXQUFXLEVBQUUsSUFBSTtnQkFDakIsVUFBVSxFQUFFLElBQUk7Z0JBQ1YsSUFBSTs7Ozs0QkFDUixVQUFRO2lDQUNMLElBQUksRUFBRTtpQ0FDTixJQUFJLENBQUMsVUFBQyxFQUFlO29DQUFiLElBQUksVUFBQSxFQUFFLEtBQUssV0FBQTtnQ0FDbEIsSUFBSSxJQUFJLEVBQUU7b0NBQ1IsS0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztpQ0FDakI7cUNBQU07b0NBQ0wsS0FBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztpQ0FDbEI7NEJBQ0gsQ0FBQyxDQUFDO2lDQUNELEtBQUssQ0FBQyxVQUFDLEdBQUc7Z0NBQ1QsS0FBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQzs0QkFDcEIsQ0FBQyxDQUFDLENBQUM7Ozs7aUJBQ047YUFDRixDQUFDLENBQUM7WUFDSCxnREFBZ0Q7WUFDaEQsa0JBQWdCLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRTtnQkFDM0Isa0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDN0IsQ0FBQyxDQUFDLENBQUM7WUFDSCxrQkFBZ0IsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFO2dCQUN6QixrQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUM3QixDQUFDLENBQUMsQ0FBQztZQUNILE9BQU8sa0JBQWdCLENBQUM7U0FDekI7SUFDSCxDQUFDO0lBQ0gsNEJBQUM7QUFBRCxDQUFDLEFBdERELElBc0RDO0FBdERZLHNEQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50U3RyZWFtTWFyc2hhbGxlciBhcyBFdmVudE1hcnNoYWxsZXIgfSBmcm9tIFwiQGF3cy1zZGsvZXZlbnRzdHJlYW0tbWFyc2hhbGxlclwiO1xuaW1wb3J0IHsgRXZlbnRTdHJlYW1NYXJzaGFsbGVyIGFzIFVuaXZlcnNhbEV2ZW50U3RyZWFtTWFyc2hhbGxlciB9IGZyb20gXCJAYXdzLXNkay9ldmVudHN0cmVhbS1zZXJkZS11bml2ZXJzYWxcIjtcbmltcG9ydCB7IERlY29kZXIsIEVuY29kZXIsIEV2ZW50U3RyZWFtTWFyc2hhbGxlciBhcyBJRXZlbnRTdHJlYW1NYXJzaGFsbGVyLCBNZXNzYWdlIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5pbXBvcnQgeyBSZWFkYWJsZSB9IGZyb20gXCJzdHJlYW1cIjtcblxuaW1wb3J0IHsgcmVhZGFibGV0b0l0ZXJhYmxlIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBFdmVudFN0cmVhbU1hcnNoYWxsZXIgZXh0ZW5kcyBJRXZlbnRTdHJlYW1NYXJzaGFsbGVyIHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXZlbnRTdHJlYW1NYXJzaGFsbGVyT3B0aW9ucyB7XG4gIHV0ZjhFbmNvZGVyOiBFbmNvZGVyO1xuICB1dGY4RGVjb2RlcjogRGVjb2Rlcjtcbn1cblxuZXhwb3J0IGNsYXNzIEV2ZW50U3RyZWFtTWFyc2hhbGxlciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgZXZlbnRNYXJzaGFsbGVyOiBFdmVudE1hcnNoYWxsZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgdW5pdmVyc2FsTWFyc2hhbGxlcjogVW5pdmVyc2FsRXZlbnRTdHJlYW1NYXJzaGFsbGVyO1xuICBjb25zdHJ1Y3Rvcih7IHV0ZjhFbmNvZGVyLCB1dGY4RGVjb2RlciB9OiBFdmVudFN0cmVhbU1hcnNoYWxsZXJPcHRpb25zKSB7XG4gICAgdGhpcy5ldmVudE1hcnNoYWxsZXIgPSBuZXcgRXZlbnRNYXJzaGFsbGVyKHV0ZjhFbmNvZGVyLCB1dGY4RGVjb2Rlcik7XG4gICAgdGhpcy51bml2ZXJzYWxNYXJzaGFsbGVyID0gbmV3IFVuaXZlcnNhbEV2ZW50U3RyZWFtTWFyc2hhbGxlcih7XG4gICAgICB1dGY4RGVjb2RlcixcbiAgICAgIHV0ZjhFbmNvZGVyLFxuICAgIH0pO1xuICB9XG5cbiAgZGVzZXJpYWxpemU8VD4oYm9keTogUmVhZGFibGUsIGRlc2VyaWFsaXplcjogKGlucHV0OiB7IFtldmVudDogc3RyaW5nXTogTWVzc2FnZSB9KSA9PiBQcm9taXNlPFQ+KTogQXN5bmNJdGVyYWJsZTxUPiB7XG4gICAgLy9zaG91bGQgdXNlIHN0cmVhbVtTeW1ib2wuYXN5bmNJdGVyYWJsZV0gd2hlbiB0aGUgYXBpIGlzIHN0YWJsZVxuICAgIC8vcmVmZXJlbmNlOiBodHRwczovL25vZGVqcy5vcmcvZG9jcy9sYXRlc3QtdjExLngvYXBpL3N0cmVhbS5odG1sI3N0cmVhbV9yZWFkYWJsZV9zeW1ib2xfYXN5bmNpdGVyYXRvclxuICAgIGNvbnN0IGJvZHlJdGVyYWJsZTogQXN5bmNJdGVyYWJsZTxVaW50OEFycmF5PiA9XG4gICAgICB0eXBlb2YgYm9keVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPT09IFwiZnVuY3Rpb25cIiA/IGJvZHkgOiByZWFkYWJsZXRvSXRlcmFibGUoYm9keSk7XG4gICAgcmV0dXJuIHRoaXMudW5pdmVyc2FsTWFyc2hhbGxlci5kZXNlcmlhbGl6ZShib2R5SXRlcmFibGUsIGRlc2VyaWFsaXplcik7XG4gIH1cblxuICBzZXJpYWxpemU8VD4oaW5wdXQ6IEFzeW5jSXRlcmFibGU8VD4sIHNlcmlhbGl6ZXI6IChldmVudDogVCkgPT4gTWVzc2FnZSk6IFJlYWRhYmxlIHtcbiAgICBjb25zdCBzZXJpYWxpemVkSXRlcmFibGUgPSB0aGlzLnVuaXZlcnNhbE1hcnNoYWxsZXIuc2VyaWFsaXplKGlucHV0LCBzZXJpYWxpemVyKTtcbiAgICBpZiAodHlwZW9mIFJlYWRhYmxlLmZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgLy9yZWZlcmVuY2U6IGh0dHBzOi8vbm9kZWpzLm9yZy9kaXN0L2xhdGVzdC12MTMueC9kb2NzL2FwaS9zdHJlYW0uaHRtbCNzdHJlYW1fbmV3X3N0cmVhbV9yZWFkYWJsZV9vcHRpb25zXG4gICAgICByZXR1cm4gUmVhZGFibGUuZnJvbShzZXJpYWxpemVkSXRlcmFibGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBpdGVyYXRvciA9IHNlcmlhbGl6ZWRJdGVyYWJsZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICAgIGNvbnN0IHNlcmlhbGl6ZWRTdHJlYW0gPSBuZXcgUmVhZGFibGUoe1xuICAgICAgICBhdXRvRGVzdHJveTogdHJ1ZSxcbiAgICAgICAgb2JqZWN0TW9kZTogdHJ1ZSxcbiAgICAgICAgYXN5bmMgcmVhZCgpIHtcbiAgICAgICAgICBpdGVyYXRvclxuICAgICAgICAgICAgLm5leHQoKVxuICAgICAgICAgICAgLnRoZW4oKHsgZG9uZSwgdmFsdWUgfSkgPT4ge1xuICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHVzaChudWxsKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5kZXN0cm95KGVycik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgICAgLy9UT0RPOiB1c2UgJ2F1dG9EZXN0cm95JyB3aGVuIHRhcmdldGluZyBOb2RlIDExXG4gICAgICBzZXJpYWxpemVkU3RyZWFtLm9uKFwiZXJyb3JcIiwgKCkgPT4ge1xuICAgICAgICBzZXJpYWxpemVkU3RyZWFtLmRlc3Ryb3koKTtcbiAgICAgIH0pO1xuICAgICAgc2VyaWFsaXplZFN0cmVhbS5vbihcImVuZFwiLCAoKSA9PiB7XG4gICAgICAgIHNlcmlhbGl6ZWRTdHJlYW0uZGVzdHJveSgpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gc2VyaWFsaXplZFN0cmVhbTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==