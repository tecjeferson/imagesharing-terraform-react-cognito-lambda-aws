import { isArrayBuffer } from "@aws-sdk/is-array-buffer";
import { Buffer } from "buffer";
export function fromArrayBuffer(input, offset, length) {
    if (offset === void 0) { offset = 0; }
    if (length === void 0) { length = input.byteLength - offset; }
    if (!isArrayBuffer(input)) {
        throw new Error("argument passed to fromArrayBuffer was not an ArrayBuffer");
    }
    if (typeof Buffer.from === "function" && Buffer.from !== Uint8Array.from) {
        return Buffer.from(input, offset, length);
    }
    // Any version of node that supports the optional offset and length
    // parameters, which were added in Node 6.0.0, will support Buffer.from and
    // have already returned. Throw if offset is not 0 or if length differs from
    // the underlying buffer's length.
    if (offset !== 0 || length !== input.byteLength) {
        throw new Error("Unable to convert TypedArray to Buffer in Node " + process.version);
    }
    return new Buffer(input);
}
export function fromString(input, encoding) {
    if (typeof input !== "string") {
        throw new Error("argument passed to fromString was not a string");
    }
    if (typeof Buffer.from === "function" && Buffer.from !== Uint8Array.from) {
        return Buffer.from(input, encoding);
    }
    return new Buffer(input, encoding);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDekQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUVoQyxNQUFNLFVBQVUsZUFBZSxDQUFDLEtBQWtCLEVBQUUsTUFBVSxFQUFFLE1BQTBDO0lBQXRELHVCQUFBLEVBQUEsVUFBVTtJQUFFLHVCQUFBLEVBQUEsU0FBaUIsS0FBSyxDQUFDLFVBQVUsR0FBRyxNQUFNO0lBQ3hHLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDekIsTUFBTSxJQUFJLEtBQUssQ0FBQywyREFBMkQsQ0FBQyxDQUFDO0tBQzlFO0lBRUQsSUFBSSxPQUFPLE1BQU0sQ0FBQyxJQUFJLEtBQUssVUFBVSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLElBQUksRUFBRTtRQUN4RSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztLQUMzQztJQUVELG1FQUFtRTtJQUNuRSwyRUFBMkU7SUFDM0UsNEVBQTRFO0lBQzVFLGtDQUFrQztJQUNsQyxJQUFJLE1BQU0sS0FBSyxDQUFDLElBQUksTUFBTSxLQUFLLEtBQUssQ0FBQyxVQUFVLEVBQUU7UUFDL0MsTUFBTSxJQUFJLEtBQUssQ0FBQyxvREFBa0QsT0FBTyxDQUFDLE9BQVMsQ0FBQyxDQUFDO0tBQ3RGO0lBQ0QsT0FBTyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMzQixDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxLQUFhLEVBQUUsUUFBeUI7SUFDakUsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0tBQ25FO0lBRUQsSUFBSSxPQUFPLE1BQU0sQ0FBQyxJQUFJLEtBQUssVUFBVSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLElBQUksRUFBRTtRQUN4RSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFFBQWUsQ0FBQyxDQUFDO0tBQzVDO0lBRUQsT0FBTyxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUUsUUFBZSxDQUFDLENBQUM7QUFDNUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzQXJyYXlCdWZmZXIgfSBmcm9tIFwiQGF3cy1zZGsvaXMtYXJyYXktYnVmZmVyXCI7XG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiYnVmZmVyXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIoaW5wdXQ6IEFycmF5QnVmZmVyLCBvZmZzZXQgPSAwLCBsZW5ndGg6IG51bWJlciA9IGlucHV0LmJ5dGVMZW5ndGggLSBvZmZzZXQpOiBCdWZmZXIge1xuICBpZiAoIWlzQXJyYXlCdWZmZXIoaW5wdXQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYXJndW1lbnQgcGFzc2VkIHRvIGZyb21BcnJheUJ1ZmZlciB3YXMgbm90IGFuIEFycmF5QnVmZmVyXCIpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBCdWZmZXIuZnJvbSA9PT0gXCJmdW5jdGlvblwiICYmIEJ1ZmZlci5mcm9tICE9PSBVaW50OEFycmF5LmZyb20pIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oaW5wdXQsIG9mZnNldCwgbGVuZ3RoKTtcbiAgfVxuXG4gIC8vIEFueSB2ZXJzaW9uIG9mIG5vZGUgdGhhdCBzdXBwb3J0cyB0aGUgb3B0aW9uYWwgb2Zmc2V0IGFuZCBsZW5ndGhcbiAgLy8gcGFyYW1ldGVycywgd2hpY2ggd2VyZSBhZGRlZCBpbiBOb2RlIDYuMC4wLCB3aWxsIHN1cHBvcnQgQnVmZmVyLmZyb20gYW5kXG4gIC8vIGhhdmUgYWxyZWFkeSByZXR1cm5lZC4gVGhyb3cgaWYgb2Zmc2V0IGlzIG5vdCAwIG9yIGlmIGxlbmd0aCBkaWZmZXJzIGZyb21cbiAgLy8gdGhlIHVuZGVybHlpbmcgYnVmZmVyJ3MgbGVuZ3RoLlxuICBpZiAob2Zmc2V0ICE9PSAwIHx8IGxlbmd0aCAhPT0gaW5wdXQuYnl0ZUxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGNvbnZlcnQgVHlwZWRBcnJheSB0byBCdWZmZXIgaW4gTm9kZSAke3Byb2Nlc3MudmVyc2lvbn1gKTtcbiAgfVxuICByZXR1cm4gbmV3IEJ1ZmZlcihpbnB1dCk7XG59XG5leHBvcnQgdHlwZSBTdHJpbmdFbmNvZGluZyA9IFwiYXNjaWlcIiB8IFwidXRmOFwiIHwgXCJ1dGYxNmxlXCIgfCBcInVjczJcIiB8IFwiYmFzZTY0XCIgfCBcImxhdGluMVwiIHwgXCJiaW5hcnlcIiB8IFwiaGV4XCI7XG5leHBvcnQgZnVuY3Rpb24gZnJvbVN0cmluZyhpbnB1dDogc3RyaW5nLCBlbmNvZGluZz86IFN0cmluZ0VuY29kaW5nKTogQnVmZmVyIHtcbiAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gXCJzdHJpbmdcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImFyZ3VtZW50IHBhc3NlZCB0byBmcm9tU3RyaW5nIHdhcyBub3QgYSBzdHJpbmdcIik7XG4gIH1cblxuICBpZiAodHlwZW9mIEJ1ZmZlci5mcm9tID09PSBcImZ1bmN0aW9uXCIgJiYgQnVmZmVyLmZyb20gIT09IFVpbnQ4QXJyYXkuZnJvbSkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShpbnB1dCwgZW5jb2RpbmcgYXMgYW55KTtcbiAgfVxuXG4gIHJldHVybiBuZXcgQnVmZmVyKGlucHV0LCBlbmNvZGluZyBhcyBhbnkpO1xufVxuIl19